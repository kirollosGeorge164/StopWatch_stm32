
StopWatch_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080025ac  080025ac  000125ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002650  08002650  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002650  08002650  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002650  08002650  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002650  08002650  00012650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002654  08002654  00012654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  080026c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080026c8  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004008  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000149b  00000000  00000000  000240a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000520  00000000  00000000  00025540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000448  00000000  00000000  00025a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178e9  00000000  00000000  00025ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086f7  00000000  00000000  0003d791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000805ef  00000000  00000000  00045e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6477  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001598  00000000  00000000  000c64c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002594 	.word	0x08002594

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002594 	.word	0x08002594

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <StopWatch_loop>:
 *      Author: Kiro
 */

#include "../Inc/StopWatch.h"

void StopWatch_loop() {
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b0ac      	sub	sp, #176	; 0xb0
 8000160:	af02      	add	r7, sp, #8
	Keypad_Matrix_t keypad = { .Rows = 4, .Row_Port = GPIOB,
 8000162:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000166:	2220      	movs	r2, #32
 8000168:	2100      	movs	r1, #0
 800016a:	4618      	mov	r0, r3
 800016c:	f001 fd90 	bl	8001c90 <memset>
 8000170:	2304      	movs	r3, #4
 8000172:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8000176:	2304      	movs	r3, #4
 8000178:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800017c:	4bcf      	ldr	r3, [pc, #828]	; (80004bc <StopWatch_loop+0x360>)
 800017e:	677b      	str	r3, [r7, #116]	; 0x74
 8000180:	230c      	movs	r3, #12
 8000182:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 8000186:	4bcd      	ldr	r3, [pc, #820]	; (80004bc <StopWatch_loop+0x360>)
 8000188:	67fb      	str	r3, [r7, #124]	; 0x7c
 800018a:	2303      	movs	r3, #3
 800018c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
			.Row_Start_Pin = 12, .Columns = 4, .Column_Port = GPIOB,
			.Column_Start_Pin = 3 };

	Alcd_t Lcd = { .Data_GPIO = GPIOA, .Data_GPIO_Start_Pin = 0, .RS_GPIO =
 8000190:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000194:	2220      	movs	r2, #32
 8000196:	2100      	movs	r1, #0
 8000198:	4618      	mov	r0, r3
 800019a:	f001 fd79 	bl	8001c90 <memset>
 800019e:	4bc8      	ldr	r3, [pc, #800]	; (80004c0 <StopWatch_loop+0x364>)
 80001a0:	653b      	str	r3, [r7, #80]	; 0x50
 80001a2:	4bc7      	ldr	r3, [pc, #796]	; (80004c0 <StopWatch_loop+0x364>)
 80001a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80001a6:	2320      	movs	r3, #32
 80001a8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80001ac:	4bc4      	ldr	r3, [pc, #784]	; (80004c0 <StopWatch_loop+0x364>)
 80001ae:	663b      	str	r3, [r7, #96]	; 0x60
 80001b0:	2310      	movs	r3, #16
 80001b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	GPIOA, .RS_GPIO_Pin = GPIO_PIN_4, .EN_GPIO = GPIOA, .EN_GPIO_Pin =
	GPIO_PIN_5 };

	__HAL_RCC_GPIOB_CLK_ENABLE()
 80001b6:	4bc3      	ldr	r3, [pc, #780]	; (80004c4 <StopWatch_loop+0x368>)
 80001b8:	699b      	ldr	r3, [r3, #24]
 80001ba:	4ac2      	ldr	r2, [pc, #776]	; (80004c4 <StopWatch_loop+0x368>)
 80001bc:	f043 0308 	orr.w	r3, r3, #8
 80001c0:	6193      	str	r3, [r2, #24]
 80001c2:	4bc0      	ldr	r3, [pc, #768]	; (80004c4 <StopWatch_loop+0x368>)
 80001c4:	699b      	ldr	r3, [r3, #24]
 80001c6:	f003 0308 	and.w	r3, r3, #8
 80001ca:	603b      	str	r3, [r7, #0]
 80001cc:	683b      	ldr	r3, [r7, #0]
	;
	Keypad_Matrix_init(&keypad);
 80001ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80001d2:	4618      	mov	r0, r3
 80001d4:	f000 fde9 	bl	8000daa <Keypad_Matrix_init>

	Alcd_Init(&Lcd, 2, 16);
 80001d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80001dc:	2210      	movs	r2, #16
 80001de:	2102      	movs	r1, #2
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fc0f 	bl	8000a04 <Alcd_Init>

	uint8_t HH = 0, MM = 0, SS = 0, mS = 0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80001ec:	2300      	movs	r3, #0
 80001ee:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 80001f2:	2300      	movs	r3, #0
 80001f4:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 80001f8:	2300      	movs	r3, #0
 80001fa:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	char text_1[] = "Push * to play";
 80001fe:	4bb2      	ldr	r3, [pc, #712]	; (80004c8 <StopWatch_loop+0x36c>)
 8000200:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000204:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000206:	c407      	stmia	r4!, {r0, r1, r2}
 8000208:	8023      	strh	r3, [r4, #0]
 800020a:	3402      	adds	r4, #2
 800020c:	0c1b      	lsrs	r3, r3, #16
 800020e:	7023      	strb	r3, [r4, #0]
	char text_2[] = "0 Stop - # Reset";
 8000210:	4bae      	ldr	r3, [pc, #696]	; (80004cc <StopWatch_loop+0x370>)
 8000212:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000216:	461d      	mov	r5, r3
 8000218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800021a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800021c:	682b      	ldr	r3, [r5, #0]
 800021e:	7023      	strb	r3, [r4, #0]
	char text_3[] = "* play - # Reset";
 8000220:	4bab      	ldr	r3, [pc, #684]	; (80004d0 <StopWatch_loop+0x374>)
 8000222:	f107 0414 	add.w	r4, r7, #20
 8000226:	461d      	mov	r5, r3
 8000228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800022a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800022c:	682b      	ldr	r3, [r5, #0]
 800022e:	7023      	strb	r3, [r4, #0]
	uint8_t len_1 = strlen(text_1);
 8000230:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000234:	4618      	mov	r0, r3
 8000236:	f7ff ff89 	bl	800014c <strlen>
 800023a:	4603      	mov	r3, r0
 800023c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	uint8_t len_2 = strlen(text_2);
 8000240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000244:	4618      	mov	r0, r3
 8000246:	f7ff ff81 	bl	800014c <strlen>
 800024a:	4603      	mov	r3, r0
 800024c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	uint8_t len_3 = strlen(text_3);
 8000250:	f107 0314 	add.w	r3, r7, #20
 8000254:	4618      	mov	r0, r3
 8000256:	f7ff ff79 	bl	800014c <strlen>
 800025a:	4603      	mov	r3, r0
 800025c:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	char str[16];

	while (1) {
		Keypad_Matrix_refresh(&keypad);
 8000260:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fdaf 	bl	8000dc8 <Keypad_Matrix_refresh>

		if (!(Keypad_Matrix_ReadKey(&keypad, 12)
 800026a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800026e:	210c      	movs	r1, #12
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fdde 	bl	8000e32 <Keypad_Matrix_ReadKey>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d122      	bne.n	80002c2 <StopWatch_loop+0x166>
				|| Keypad_Matrix_ReadKey(&keypad, 13)
 800027c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000280:	210d      	movs	r1, #13
 8000282:	4618      	mov	r0, r3
 8000284:	f000 fdd5 	bl	8000e32 <Keypad_Matrix_ReadKey>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d119      	bne.n	80002c2 <StopWatch_loop+0x166>
				|| Keypad_Matrix_ReadKey(&keypad, 14))) {
 800028e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000292:	210e      	movs	r1, #14
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fdcc 	bl	8000e32 <Keypad_Matrix_ReadKey>
 800029a:	4603      	mov	r3, r0
		if (!(Keypad_Matrix_ReadKey(&keypad, 12)
 800029c:	2b00      	cmp	r3, #0
 800029e:	d110      	bne.n	80002c2 <StopWatch_loop+0x166>
			Alcd_PutAt_n(&Lcd, 0, 0, text_1, len_1);
 80002a0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80002a4:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80002a8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	4613      	mov	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	2100      	movs	r1, #0
 80002b4:	f000 fc61 	bl	8000b7a <Alcd_PutAt_n>
			HAL_Delay(500);
 80002b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002bc:	f000 fe32 	bl	8000f24 <HAL_Delay>
 80002c0:	e150      	b.n	8000564 <StopWatch_loop+0x408>
		}
		//start button
		else if (Keypad_Matrix_ReadKey(&keypad, 12)) {
 80002c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002c6:	210c      	movs	r1, #12
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 fdb2 	bl	8000e32 <Keypad_Matrix_ReadKey>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0c5      	beq.n	8000260 <StopWatch_loop+0x104>
			Alcd_Clear(&Lcd);
 80002d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fc67 	bl	8000bac <Alcd_Clear>
			Alcd_PutAt_n(&Lcd, 1, 0, text_2, len_2);
 80002de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80002e2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80002e6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	4613      	mov	r3, r2
 80002ee:	2200      	movs	r2, #0
 80002f0:	2101      	movs	r1, #1
 80002f2:	f000 fc42 	bl	8000b7a <Alcd_PutAt_n>
			uint8_t str_len = sprintf(str, "%02d:%02d:%02d.%02d", HH, MM, SS,
 80002f6:	f897 1093 	ldrb.w	r1, [r7, #147]	; 0x93
 80002fa:	f897 4092 	ldrb.w	r4, [r7, #146]	; 0x92
 80002fe:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8000302:	f897 2090 	ldrb.w	r2, [r7, #144]	; 0x90
 8000306:	1d38      	adds	r0, r7, #4
 8000308:	9201      	str	r2, [sp, #4]
 800030a:	9300      	str	r3, [sp, #0]
 800030c:	4623      	mov	r3, r4
 800030e:	460a      	mov	r2, r1
 8000310:	4970      	ldr	r1, [pc, #448]	; (80004d4 <StopWatch_loop+0x378>)
 8000312:	f001 fcc5 	bl	8001ca0 <siprintf>
 8000316:	4603      	mov	r3, r0
 8000318:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					mS);
			for (int i = 0; i < 24; i++) {
 800031c:	2300      	movs	r3, #0
 800031e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000322:	e11a      	b.n	800055a <StopWatch_loop+0x3fe>
				for (int j = 0; j < 60; j++) {
 8000324:	2300      	movs	r3, #0
 8000326:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800032a:	e10c      	b.n	8000546 <StopWatch_loop+0x3ea>
					for (int k = 0; k < 60; k++) {
 800032c:	2300      	movs	r3, #0
 800032e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000332:	e0fe      	b.n	8000532 <StopWatch_loop+0x3d6>
						for (int l = 0; l < 100; l++) {
 8000334:	2300      	movs	r3, #0
 8000336:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800033a:	e0f0      	b.n	800051e <StopWatch_loop+0x3c2>
							str_len = sprintf(str, "%02d:%02d:%02d.%02d", i, j,
 800033c:	1d38      	adds	r0, r7, #4
 800033e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800034e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000352:	4960      	ldr	r1, [pc, #384]	; (80004d4 <StopWatch_loop+0x378>)
 8000354:	f001 fca4 	bl	8001ca0 <siprintf>
 8000358:	4603      	mov	r3, r0
 800035a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
									k, l);
							Alcd_PutAt_n(&Lcd, 0, 0, str, str_len);
 800035e:	1d3a      	adds	r2, r7, #4
 8000360:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8000364:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	4613      	mov	r3, r2
 800036c:	2200      	movs	r2, #0
 800036e:	2100      	movs	r1, #0
 8000370:	f000 fc03 	bl	8000b7a <Alcd_PutAt_n>
							Keypad_Matrix_refresh(&keypad);
 8000374:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000378:	4618      	mov	r0, r3
 800037a:	f000 fd25 	bl	8000dc8 <Keypad_Matrix_refresh>
							// reset button
							if (Keypad_Matrix_ReadKey(&keypad, 14)) {
 800037e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000382:	210e      	movs	r1, #14
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fd54 	bl	8000e32 <Keypad_Matrix_ReadKey>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d04e      	beq.n	800042e <StopWatch_loop+0x2d2>
								i = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
								j = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
								k = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
								l = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
								str_len = sprintf(str, "%02d:%02d:%02d.%02d", i,
 80003a8:	1d38      	adds	r0, r7, #4
 80003aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80003ae:	9301      	str	r3, [sp, #4]
 80003b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80003ba:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80003be:	4945      	ldr	r1, [pc, #276]	; (80004d4 <StopWatch_loop+0x378>)
 80003c0:	f001 fc6e 	bl	8001ca0 <siprintf>
 80003c4:	4603      	mov	r3, r0
 80003c6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
										j, k, l);
								Alcd_PutAt_n(&Lcd, 0, 0, str, str_len);
 80003ca:	1d3a      	adds	r2, r7, #4
 80003cc:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80003d0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80003d4:	9300      	str	r3, [sp, #0]
 80003d6:	4613      	mov	r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	2100      	movs	r1, #0
 80003dc:	f000 fbcd 	bl	8000b7a <Alcd_PutAt_n>
								Alcd_PutAt_n(&Lcd, 1, 0, text_1, len_1);
 80003e0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80003e4:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80003e8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	4613      	mov	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	2101      	movs	r1, #1
 80003f4:	f000 fbc1 	bl	8000b7a <Alcd_PutAt_n>
								while (!Keypad_Matrix_ReadKey(&keypad, 12)) {
 80003f8:	e004      	b.n	8000404 <StopWatch_loop+0x2a8>
									Keypad_Matrix_refresh(&keypad);
 80003fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 fce2 	bl	8000dc8 <Keypad_Matrix_refresh>
								while (!Keypad_Matrix_ReadKey(&keypad, 12)) {
 8000404:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000408:	210c      	movs	r1, #12
 800040a:	4618      	mov	r0, r3
 800040c:	f000 fd11 	bl	8000e32 <Keypad_Matrix_ReadKey>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d0f1      	beq.n	80003fa <StopWatch_loop+0x29e>
								}
								Alcd_PutAt_n(&Lcd, 1, 0, text_2, len_2);
 8000416:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800041a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800041e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	4613      	mov	r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	2101      	movs	r1, #1
 800042a:	f000 fba6 	bl	8000b7a <Alcd_PutAt_n>
							}

//							HAL_Delay(1);
							// stop button

							if (Keypad_Matrix_ReadKey(&keypad, 13)) {
 800042e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000432:	210d      	movs	r1, #13
 8000434:	4618      	mov	r0, r3
 8000436:	f000 fcfc 	bl	8000e32 <Keypad_Matrix_ReadKey>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d069      	beq.n	8000514 <StopWatch_loop+0x3b8>
								Keypad_Matrix_refresh(&keypad);
 8000440:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fcbf 	bl	8000dc8 <Keypad_Matrix_refresh>
								Alcd_Clear(&Lcd);
 800044a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800044e:	4618      	mov	r0, r3
 8000450:	f000 fbac 	bl	8000bac <Alcd_Clear>
								Alcd_PutAt_n(&Lcd, 0, 0, str, str_len);
 8000454:	1d3a      	adds	r2, r7, #4
 8000456:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800045a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800045e:	9300      	str	r3, [sp, #0]
 8000460:	4613      	mov	r3, r2
 8000462:	2200      	movs	r2, #0
 8000464:	2100      	movs	r1, #0
 8000466:	f000 fb88 	bl	8000b7a <Alcd_PutAt_n>
								Alcd_PutAt_n(&Lcd, 1, 0, text_3, len_3);
 800046a:	f107 0214 	add.w	r2, r7, #20
 800046e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8000472:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8000476:	9300      	str	r3, [sp, #0]
 8000478:	4613      	mov	r3, r2
 800047a:	2200      	movs	r2, #0
 800047c:	2101      	movs	r1, #1
 800047e:	f000 fb7c 	bl	8000b7a <Alcd_PutAt_n>
								while (!Keypad_Matrix_ReadKey(&keypad, 12)
 8000482:	e035      	b.n	80004f0 <StopWatch_loop+0x394>
										&& !Keypad_Matrix_ReadKey(&keypad, 14)) {
									Keypad_Matrix_refresh(&keypad);
 8000484:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000488:	4618      	mov	r0, r3
 800048a:	f000 fc9d 	bl	8000dc8 <Keypad_Matrix_refresh>
									if (Keypad_Matrix_ReadKey(&keypad, 12))
 800048e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000492:	210c      	movs	r1, #12
 8000494:	4618      	mov	r0, r3
 8000496:	f000 fccc 	bl	8000e32 <Keypad_Matrix_ReadKey>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d01b      	beq.n	80004d8 <StopWatch_loop+0x37c>
										Alcd_PutAt_n(&Lcd, 1, 0, text_2, len_2);
 80004a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80004a4:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80004a8:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80004ac:	9300      	str	r3, [sp, #0]
 80004ae:	4613      	mov	r3, r2
 80004b0:	2200      	movs	r2, #0
 80004b2:	2101      	movs	r1, #1
 80004b4:	f000 fb61 	bl	8000b7a <Alcd_PutAt_n>
 80004b8:	e01a      	b.n	80004f0 <StopWatch_loop+0x394>
 80004ba:	bf00      	nop
 80004bc:	40010c00 	.word	0x40010c00
 80004c0:	40010800 	.word	0x40010800
 80004c4:	40021000 	.word	0x40021000
 80004c8:	080025c0 	.word	0x080025c0
 80004cc:	080025d0 	.word	0x080025d0
 80004d0:	080025e4 	.word	0x080025e4
 80004d4:	080025ac 	.word	0x080025ac
									else
										Alcd_PutAt_n(&Lcd, 1, 0, text_1, len_1);
 80004d8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80004dc:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80004e0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	4613      	mov	r3, r2
 80004e8:	2200      	movs	r2, #0
 80004ea:	2101      	movs	r1, #1
 80004ec:	f000 fb45 	bl	8000b7a <Alcd_PutAt_n>
								while (!Keypad_Matrix_ReadKey(&keypad, 12)
 80004f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004f4:	210c      	movs	r1, #12
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 fc9b 	bl	8000e32 <Keypad_Matrix_ReadKey>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d108      	bne.n	8000514 <StopWatch_loop+0x3b8>
										&& !Keypad_Matrix_ReadKey(&keypad, 14)) {
 8000502:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000506:	210e      	movs	r1, #14
 8000508:	4618      	mov	r0, r3
 800050a:	f000 fc92 	bl	8000e32 <Keypad_Matrix_ReadKey>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0b7      	beq.n	8000484 <StopWatch_loop+0x328>
						for (int l = 0; l < 100; l++) {
 8000514:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000518:	3301      	adds	r3, #1
 800051a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800051e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000522:	2b63      	cmp	r3, #99	; 0x63
 8000524:	f77f af0a 	ble.w	800033c <StopWatch_loop+0x1e0>
					for (int k = 0; k < 60; k++) {
 8000528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800052c:	3301      	adds	r3, #1
 800052e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000532:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000536:	2b3b      	cmp	r3, #59	; 0x3b
 8000538:	f77f aefc 	ble.w	8000334 <StopWatch_loop+0x1d8>
				for (int j = 0; j < 60; j++) {
 800053c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000540:	3301      	adds	r3, #1
 8000542:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000546:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800054a:	2b3b      	cmp	r3, #59	; 0x3b
 800054c:	f77f aeee 	ble.w	800032c <StopWatch_loop+0x1d0>
			for (int i = 0; i < 24; i++) {
 8000550:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000554:	3301      	adds	r3, #1
 8000556:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800055a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800055e:	2b17      	cmp	r3, #23
 8000560:	f77f aee0 	ble.w	8000324 <StopWatch_loop+0x1c8>
		Keypad_Matrix_refresh(&keypad);
 8000564:	e67c      	b.n	8000260 <StopWatch_loop+0x104>
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fc78 	bl	8000e60 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f805 	bl	800057e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f848 	bl	8000608 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  StopWatch_loop();
 8000578:	f7ff fdf0 	bl	800015c <StopWatch_loop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057c:	e7fe      	b.n	800057c <main+0x14>

0800057e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	b090      	sub	sp, #64	; 0x40
 8000582:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000584:	f107 0318 	add.w	r3, r7, #24
 8000588:	2228      	movs	r2, #40	; 0x28
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f001 fb7f 	bl	8001c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ae:	2301      	movs	r3, #1
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 ff50 	bl	800146c <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005d2:	f000 f83b 	bl	800064c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2102      	movs	r1, #2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 f9bd 	bl	8001970 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005fc:	f000 f826 	bl	800064c <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3740      	adds	r7, #64	; 0x40
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_GPIO_Init+0x40>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <MX_GPIO_Init+0x40>)
 8000614:	f043 0320 	orr.w	r3, r3, #32
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_GPIO_Init+0x40>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0320 	and.w	r3, r3, #32
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_GPIO_Init+0x40>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	4a07      	ldr	r2, [pc, #28]	; (8000648 <MX_GPIO_Init+0x40>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	6193      	str	r3, [r2, #24]
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <MX_GPIO_Init+0x40>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	40021000 	.word	0x40021000

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000654:	e7fe      	b.n	8000654 <Error_Handler+0x8>
	...

08000658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <HAL_MspInit+0x5c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <HAL_MspInit+0x5c>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_MspInit+0x5c>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <HAL_MspInit+0x5c>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <HAL_MspInit+0x5c>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <HAL_MspInit+0x5c>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <HAL_MspInit+0x60>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <HAL_MspInit+0x60>)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010000 	.word	0x40010000

080006bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <NMI_Handler+0x4>

080006c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <HardFault_Handler+0x4>

080006c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <MemManage_Handler+0x4>

080006ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <BusFault_Handler+0x4>

080006d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <UsageFault_Handler+0x4>

080006da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr

080006e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr

080006f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr

080006fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000702:	f000 fbf3 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000714:	4a14      	ldr	r2, [pc, #80]	; (8000768 <_sbrk+0x5c>)
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <_sbrk+0x60>)
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <_sbrk+0x64>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d102      	bne.n	800072e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <_sbrk+0x64>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <_sbrk+0x68>)
 800072c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <_sbrk+0x64>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	429a      	cmp	r2, r3
 800073a:	d207      	bcs.n	800074c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800073c:	f001 fa7e 	bl	8001c3c <__errno>
 8000740:	4603      	mov	r3, r0
 8000742:	220c      	movs	r2, #12
 8000744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	e009      	b.n	8000760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <_sbrk+0x64>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <_sbrk+0x64>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <_sbrk+0x64>)
 800075c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800075e:	68fb      	ldr	r3, [r7, #12]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20005000 	.word	0x20005000
 800076c:	00000400 	.word	0x00000400
 8000770:	2000008c 	.word	0x2000008c
 8000774:	200000a8 	.word	0x200000a8

08000778 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000784:	f7ff fff8 	bl	8000778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000788:	480b      	ldr	r0, [pc, #44]	; (80007b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800078a:	490c      	ldr	r1, [pc, #48]	; (80007bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000790:	e002      	b.n	8000798 <LoopCopyDataInit>

08000792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000796:	3304      	adds	r3, #4

08000798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800079c:	d3f9      	bcc.n	8000792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007a0:	4c09      	ldr	r4, [pc, #36]	; (80007c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a4:	e001      	b.n	80007aa <LoopFillZerobss>

080007a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a8:	3204      	adds	r2, #4

080007aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ac:	d3fb      	bcc.n	80007a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ae:	f001 fa4b 	bl	8001c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007b2:	f7ff fed9 	bl	8000568 <main>
  bx lr
 80007b6:	4770      	bx	lr
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007c0:	08002658 	.word	0x08002658
  ldr r2, =_sbss
 80007c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007c8:	200000a4 	.word	0x200000a4

080007cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC1_2_IRQHandler>
	...

080007d0 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <DWT_Delay_Init+0x58>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	4a13      	ldr	r2, [pc, #76]	; (8000828 <DWT_Delay_Init+0x58>)
 80007da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80007de:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <DWT_Delay_Init+0x58>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	4a10      	ldr	r2, [pc, #64]	; (8000828 <DWT_Delay_Init+0x58>)
 80007e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007ea:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <DWT_Delay_Init+0x5c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a0e      	ldr	r2, [pc, #56]	; (800082c <DWT_Delay_Init+0x5c>)
 80007f2:	f023 0301 	bic.w	r3, r3, #1
 80007f6:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <DWT_Delay_Init+0x5c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0b      	ldr	r2, [pc, #44]	; (800082c <DWT_Delay_Init+0x5c>)
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <DWT_Delay_Init+0x5c>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800080a:	bf00      	nop
     __ASM volatile ("NOP");
 800080c:	bf00      	nop
  __ASM volatile ("NOP");
 800080e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <DWT_Delay_Init+0x5c>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000818:	2300      	movs	r3, #0
 800081a:	e000      	b.n	800081e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800081c:	2301      	movs	r3, #1
  }
}
 800081e:	4618      	mov	r0, r3
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000edf0 	.word	0xe000edf0
 800082c:	e0001000 	.word	0xe0001000

08000830 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <DWT_Delay_us+0x40>)
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800083e:	f001 f9d5 	bl	8001bec <HAL_RCC_GetHCLKFreq>
 8000842:	4603      	mov	r3, r0
 8000844:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <DWT_Delay_us+0x44>)
 8000846:	fba2 2303 	umull	r2, r3, r2, r3
 800084a:	0c9b      	lsrs	r3, r3, #18
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	fb02 f303 	mul.w	r3, r2, r3
 8000852:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000854:	bf00      	nop
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <DWT_Delay_us+0x40>)
 8000858:	685a      	ldr	r2, [r3, #4]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	1ad2      	subs	r2, r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	429a      	cmp	r2, r3
 8000862:	d3f8      	bcc.n	8000856 <DWT_Delay_us+0x26>
		;
}
 8000864:	bf00      	nop
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	e0001000 	.word	0xe0001000
 8000874:	431bde83 	.word	0x431bde83

08000878 <usDelay>:
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 8000882:	88fb      	ldrh	r3, [r7, #6]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ffd3 	bl	8000830 <DWT_Delay_us>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	460b      	mov	r3, r1
 800089c:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	68da      	ldr	r2, [r3, #12]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	7a1b      	ldrb	r3, [r3, #8]
 80008a8:	4619      	mov	r1, r3
 80008aa:	230f      	movs	r3, #15
 80008ac:	408b      	lsls	r3, r1
 80008ae:	43db      	mvns	r3, r3
 80008b0:	4619      	mov	r1, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	400a      	ands	r2, r1
 80008b8:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	68da      	ldr	r2, [r3, #12]
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	7a09      	ldrb	r1, [r1, #8]
 80008c6:	408b      	lsls	r3, r1
 80008c8:	4619      	mov	r1, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	60da      	str	r2, [r3, #12]
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6958      	ldr	r0, [r3, #20]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	8b1b      	ldrh	r3, [r3, #24]
 80008f0:	78fa      	ldrb	r2, [r7, #3]
 80008f2:	4619      	mov	r1, r3
 80008f4:	f000 fda2 	bl	800143c <HAL_GPIO_WritePin>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68d8      	ldr	r0, [r3, #12]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	8a1b      	ldrh	r3, [r3, #16]
 8000914:	78fa      	ldrb	r2, [r7, #3]
 8000916:	4619      	mov	r1, r3
 8000918:	f000 fd90 	bl	800143c <HAL_GPIO_WritePin>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G =
 800092c:	f107 0308 	add.w	r3, r7, #8
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
	{ .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin, .Speed = GPIO_SPEED_FREQ_LOW };
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	8b1b      	ldrh	r3, [r3, #24]
	GPIO_InitTypeDef G =
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	2301      	movs	r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	2302      	movs	r3, #2
 8000946:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	f107 0208 	add.w	r2, r7, #8
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fbee 	bl	8001134 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	8a1b      	ldrh	r3, [r3, #16]
 800095c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	f107 0208 	add.w	r2, r7, #8
 8000966:	4611      	mov	r1, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fbe3 	bl	8001134 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	7a1b      	ldrb	r3, [r3, #8]
 8000972:	461a      	mov	r2, r3
 8000974:	230f      	movs	r3, #15
 8000976:	4093      	lsls	r3, r2
 8000978:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f107 0208 	add.w	r2, r7, #8
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fbd5 	bl	8001134 <HAL_GPIO_Init>
}
 800098a:	bf00      	nop
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	460b      	mov	r3, r1
 800099c:	70fb      	strb	r3, [r7, #3]
 800099e:	4613      	mov	r3, r2
 80009a0:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 80009a2:	78fb      	ldrb	r3, [r7, #3]
 80009a4:	4619      	mov	r1, r3
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff ff98 	bl	80008dc <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 80009ac:	78bb      	ldrb	r3, [r7, #2]
 80009ae:	091b      	lsrs	r3, r3, #4
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff6c 	bl	8000892 <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 80009ba:	2101      	movs	r1, #1
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff9f 	bl	8000900 <EN_SET>
 80009c2:	200a      	movs	r0, #10
 80009c4:	f7ff ff58 	bl	8000878 <usDelay>
 80009c8:	2100      	movs	r1, #0
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff ff98 	bl	8000900 <EN_SET>
 80009d0:	2064      	movs	r0, #100	; 0x64
 80009d2:	f7ff ff51 	bl	8000878 <usDelay>
	;
	Write_HalfByte(lcd, value);
 80009d6:	78bb      	ldrb	r3, [r7, #2]
 80009d8:	4619      	mov	r1, r3
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff ff59 	bl	8000892 <Write_HalfByte>
	PulseEn
 80009e0:	2101      	movs	r1, #1
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ff8c 	bl	8000900 <EN_SET>
 80009e8:	200a      	movs	r0, #10
 80009ea:	f7ff ff45 	bl	8000878 <usDelay>
 80009ee:	2100      	movs	r1, #0
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ff85 	bl	8000900 <EN_SET>
 80009f6:	2064      	movs	r0, #100	; 0x64
 80009f8:	f7ff ff3e 	bl	8000878 <usDelay>
	;
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	70fb      	strb	r3, [r7, #3]
 8000a10:	4613      	mov	r3, r2
 8000a12:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 8000a14:	f7ff fedc 	bl	80007d0 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff83 	bl	8000924 <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2240      	movs	r2, #64	; 0x40
 8000a28:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	78ba      	ldrb	r2, [r7, #2]
 8000a2e:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8000a30:	78bb      	ldrb	r3, [r7, #2]
 8000a32:	3340      	adds	r3, #64	; 0x40
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ff4d 	bl	80008dc <RS_SET>
	EN_SET(lcd, 0);
 8000a42:	2100      	movs	r1, #0
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff ff5b 	bl	8000900 <EN_SET>
	usDelay(50000);
 8000a4a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a4e:	f7ff ff13 	bl	8000878 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++)
 8000a52:	2300      	movs	r3, #0
 8000a54:	73fb      	strb	r3, [r7, #15]
 8000a56:	e018      	b.n	8000a8a <Alcd_Init+0x86>
	{
		Write_HalfByte(lcd, 0x03);
 8000a58:	2103      	movs	r1, #3
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ff19 	bl	8000892 <Write_HalfByte>
		PulseEn
 8000a60:	2101      	movs	r1, #1
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff ff4c 	bl	8000900 <EN_SET>
 8000a68:	200a      	movs	r0, #10
 8000a6a:	f7ff ff05 	bl	8000878 <usDelay>
 8000a6e:	2100      	movs	r1, #0
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ff45 	bl	8000900 <EN_SET>
 8000a76:	2064      	movs	r0, #100	; 0x64
 8000a78:	f7ff fefe 	bl	8000878 <usDelay>
		;
		usDelay(4500);
 8000a7c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000a80:	f7ff fefa 	bl	8000878 <usDelay>
	for (x = 0; x < 2; x++)
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	3301      	adds	r3, #1
 8000a88:	73fb      	strb	r3, [r7, #15]
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d9e3      	bls.n	8000a58 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 8000a90:	2103      	movs	r1, #3
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fefd 	bl	8000892 <Write_HalfByte>
	PulseEn
 8000a98:	2101      	movs	r1, #1
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff ff30 	bl	8000900 <EN_SET>
 8000aa0:	200a      	movs	r0, #10
 8000aa2:	f7ff fee9 	bl	8000878 <usDelay>
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff29 	bl	8000900 <EN_SET>
 8000aae:	2064      	movs	r0, #100	; 0x64
 8000ab0:	f7ff fee2 	bl	8000878 <usDelay>
	;
	usDelay(150);
 8000ab4:	2096      	movs	r0, #150	; 0x96
 8000ab6:	f7ff fedf 	bl	8000878 <usDelay>
	Write_HalfByte(lcd, 0x02);
 8000aba:	2102      	movs	r1, #2
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff fee8 	bl	8000892 <Write_HalfByte>
	PulseEn
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ff1b 	bl	8000900 <EN_SET>
 8000aca:	200a      	movs	r0, #10
 8000acc:	f7ff fed4 	bl	8000878 <usDelay>
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff ff14 	bl	8000900 <EN_SET>
 8000ad8:	2064      	movs	r0, #100	; 0x64
 8000ada:	f7ff fecd 	bl	8000878 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8000ade:	2228      	movs	r2, #40	; 0x28
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ff55 	bl	8000992 <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8000ae8:	2300      	movs	r3, #0
 8000aea:	2200      	movs	r2, #0
 8000aec:	2101      	movs	r1, #1
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f86d 	bl	8000bce <Alcd_Display_Control>
	Alcd_Clear(lcd);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f000 f859 	bl	8000bac <Alcd_Clear>
}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	70fb      	strb	r3, [r7, #3]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 8000b12:	78fb      	ldrb	r3, [r7, #3]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	4413      	add	r3, r2
 8000b18:	7e9a      	ldrb	r2, [r3, #26]
 8000b1a:	78bb      	ldrb	r3, [r7, #2]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	b25b      	sxtb	r3, r3
 8000b22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b26:	b25b      	sxtb	r3, r3
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff ff2f 	bl	8000992 <Alcd_SendByte>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	4613      	mov	r3, r2
 8000b48:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	75fb      	strb	r3, [r7, #23]
 8000b4e:	e00b      	b.n	8000b68 <Alcd_Put_n+0x2c>
	{
		SendByte(1, *(text++));
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	60ba      	str	r2, [r7, #8]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f7ff ff18 	bl	8000992 <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++)
 8000b62:	7dfb      	ldrb	r3, [r7, #23]
 8000b64:	3301      	adds	r3, #1
 8000b66:	75fb      	strb	r3, [r7, #23]
 8000b68:	7dfa      	ldrb	r2, [r7, #23]
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d3ef      	bcc.n	8000b50 <Alcd_Put_n+0x14>
	}
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text, uint8_t len)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	60f8      	str	r0, [r7, #12]
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	72fb      	strb	r3, [r7, #11]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8000b8c:	7aba      	ldrb	r2, [r7, #10]
 8000b8e:	7afb      	ldrb	r3, [r7, #11]
 8000b90:	4619      	mov	r1, r3
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f7ff ffb5 	bl	8000b02 <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8000b98:	7e3b      	ldrb	r3, [r7, #24]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f7ff ffcc 	bl	8000b3c <Alcd_Put_n>
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <Alcd_Clear>:
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff feea 	bl	8000992 <Alcd_SendByte>
	usDelay(2000);
 8000bbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bc2:	f7ff fe59 	bl	8000878 <usDelay>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF, uint8_t BLINK_ON_OFF)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	4611      	mov	r1, r2
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4603      	mov	r3, r0
 8000bde:	70fb      	strb	r3, [r7, #3]
 8000be0:	460b      	mov	r3, r1
 8000be2:	70bb      	strb	r3, [r7, #2]
 8000be4:	4613      	mov	r3, r2
 8000be6:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	779a      	strb	r2, [r3, #30]
	if (ON_OFF)
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d006      	beq.n	8000c02 <Alcd_Display_Control+0x34>
	{
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7f9b      	ldrb	r3, [r3, #30]
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF)
 8000c02:	78bb      	ldrb	r3, [r7, #2]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d006      	beq.n	8000c16 <Alcd_Display_Control+0x48>
	{
		lcd->_displaycontrol |= LCD_CURSORON;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7f9b      	ldrb	r3, [r3, #30]
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF)
 8000c16:	787b      	ldrb	r3, [r7, #1]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d006      	beq.n	8000c2a <Alcd_Display_Control+0x5c>
	{
		lcd->_displaycontrol |= LCD_BLINKON;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7f9b      	ldrb	r3, [r3, #30]
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	7f9b      	ldrb	r3, [r3, #30]
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7f9b      	ldrb	r3, [r3, #30]
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	461a      	mov	r2, r3
 8000c44:	2100      	movs	r1, #0
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff fea3 	bl	8000992 <Alcd_SendByte>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <HardwareInterface_Initialize>:
 *  Created on: Feb 17, 2024
 *      Author: Kiro
 */
#include "Matrix_Keypad.h"

static void HardwareInterface_Initialize(Keypad_Matrix_t *kp) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GP = { .Mode = GPIO_MODE_OUTPUT_PP, .Speed = GPIO_SPEED_LOW
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61bb      	str	r3, [r7, #24]
	//pp:push pull
			};
	///
	/// Output Pins Initialization
	///
	uint32_t Pins = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = 0; x < kp->Rows; x++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
 8000c7a:	e00e      	b.n	8000c9a <HardwareInterface_Initialize+0x46>
		Pins |= (1 << (kp->Row_Start_Pin + x));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	7b1b      	ldrb	r3, [r3, #12]
 8000c80:	461a      	mov	r2, r3
 8000c82:	6a3b      	ldr	r3, [r7, #32]
 8000c84:	4413      	add	r3, r2
 8000c86:	2201      	movs	r2, #1
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	4313      	orrs	r3, r2
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = 0; x < kp->Rows; x++) {
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	3301      	adds	r3, #1
 8000c98:	623b      	str	r3, [r7, #32]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	6a3b      	ldr	r3, [r7, #32]
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	dbea      	blt.n	8000c7c <HardwareInterface_Initialize+0x28>
		//Pins = Pins | (1 << (Start_Pin) + x);
	}
	kp->Output_mask = Pins;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000caa:	61da      	str	r2, [r3, #28]
	GP.Pin = Pins;
 8000cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cae:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(kp->Row_Port, &GP);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f107 020c 	add.w	r2, r7, #12
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 fa3a 	bl	8001134 <HAL_GPIO_Init>
	///
	///Input Pins Initialization
	///
	GP.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
	GP.Pull = GPIO_PULLDOWN;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	617b      	str	r3, [r7, #20]
	Pins = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = 0; x < kp->Columns; x++) {
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
 8000cd0:	e00e      	b.n	8000cf0 <HardwareInterface_Initialize+0x9c>
		Pins |= (1 << (kp->Column_Start_Pin + x));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	7d1b      	ldrb	r3, [r3, #20]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	4413      	add	r3, r2
 8000cdc:	2201      	movs	r2, #1
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = 0; x < kp->Columns; x++) {
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3301      	adds	r3, #1
 8000cee:	61fb      	str	r3, [r7, #28]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	785b      	ldrb	r3, [r3, #1]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	dbea      	blt.n	8000cd2 <HardwareInterface_Initialize+0x7e>
		//Pins = Pins | (1 << (Start_Pin) + x);
	}
	GP.Pin = Pins;
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	60fb      	str	r3, [r7, #12]
	kp->Input_mask = Pins;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d04:	619a      	str	r2, [r3, #24]
	HAL_GPIO_Init(kp->Column_Port, &GP);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	f107 020c 	add.w	r2, r7, #12
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 fa0f 	bl	8001134 <HAL_GPIO_Init>

}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	; 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <Generate_Delay>:

static void Generate_Delay(uint16_t Delay) {
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Delay);
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f8fa 	bl	8000f24 <HAL_Delay>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HardwareInterface_GetInputs>:

static uint8_t HardwareInterface_GetInputs(Keypad_Matrix_t *kp) {
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	uint32_t temp = kp->Column_Port->IDR & kp->Input_mask;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
	temp >>= kp->Column_Start_Pin;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7d1b      	ldrb	r3, [r3, #20]
 8000d52:	461a      	mov	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	60fb      	str	r3, [r7, #12]
	return (uint8_t) temp;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	b2db      	uxtb	r3, r3
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <HardwareInterface_SetOutputs>:

static void HardwareInterface_SetOutputs(Keypad_Matrix_t *kp,
		uint8_t OutputStatus) {
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	70fb      	strb	r3, [r7, #3]
	kp->Row_Port->ODR &= ~kp->Output_mask;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	68d9      	ldr	r1, [r3, #12]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	400a      	ands	r2, r1
 8000d86:	60da      	str	r2, [r3, #12]
	kp->Row_Port->ODR |= ((uint32_t) OutputStatus << kp->Row_Start_Pin);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	68d9      	ldr	r1, [r3, #12]
 8000d8e:	78fb      	ldrb	r3, [r7, #3]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	7b12      	ldrb	r2, [r2, #12]
 8000d94:	fa03 f202 	lsl.w	r2, r3, r2
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	60da      	str	r2, [r3, #12]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <Keypad_Matrix_init>:

void Keypad_Matrix_init(Keypad_Matrix_t *kp) {
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	HardwareInterface_Initialize(kp);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ff4e 	bl	8000c54 <HardwareInterface_Initialize>
	HardwareInterface_SetOutputs(kp, 0);
 8000db8:	2100      	movs	r1, #0
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ffd4 	bl	8000d68 <HardwareInterface_SetOutputs>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <Keypad_Matrix_refresh>:

void Keypad_Matrix_refresh(Keypad_Matrix_t *kp) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	kp->Button_Status = 0;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
	uint8_t scan = 0b1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < kp->Rows; i++) {
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73bb      	strb	r3, [r7, #14]
 8000dde:	e01e      	b.n	8000e1e <Keypad_Matrix_refresh+0x56>
		HardwareInterface_SetOutputs(kp, scan);
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	4619      	mov	r1, r3
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ffbf 	bl	8000d68 <HardwareInterface_SetOutputs>
		Generate_Delay(1);
 8000dea:	2001      	movs	r0, #1
 8000dec:	f7ff ff97 	bl	8000d1e <Generate_Delay>
		kp->Button_Status |= HardwareInterface_GetInputs(kp)
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ffa1 	bl	8000d38 <HardwareInterface_GetInputs>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4619      	mov	r1, r3
				<< (i * kp->Columns);
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	7852      	ldrb	r2, [r2, #1]
 8000e00:	fb02 f303 	mul.w	r3, r2, r3
 8000e04:	fa01 f203 	lsl.w	r2, r1, r3
		kp->Button_Status |= HardwareInterface_GetInputs(kp)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	605a      	str	r2, [r3, #4]
		scan <<= 1;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < kp->Rows; i++) {
 8000e18:	7bbb      	ldrb	r3, [r7, #14]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	73bb      	strb	r3, [r7, #14]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	7bba      	ldrb	r2, [r7, #14]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d3db      	bcc.n	8000de0 <Keypad_Matrix_refresh+0x18>
	}
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <Keypad_Matrix_ReadKey>:

uint8_t Keypad_Matrix_ReadKey(Keypad_Matrix_t *kp, uint8_t key) {
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	70fb      	strb	r3, [r7, #3]
	if (kp->Button_Status & (1 << key)) {
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	78fa      	ldrb	r2, [r7, #3]
 8000e44:	2101      	movs	r1, #1
 8000e46:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <Keypad_Matrix_ReadKey+0x22>
		return 1;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <Keypad_Matrix_ReadKey+0x24>
	} else
		return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_Init+0x28>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_Init+0x28>)
 8000e6a:	f043 0310 	orr.w	r3, r3, #16
 8000e6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f92b 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	200f      	movs	r0, #15
 8000e78:	f000 f808 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff fbec 	bl	8000658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40022000 	.word	0x40022000

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x54>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f935 	bl	800111a <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f000 f90b 	bl	80010e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_InitTick+0x5c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_IncTick+0x1c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a03      	ldr	r2, [pc, #12]	; (8000f0c <HAL_IncTick+0x20>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000090 	.word	0x20000090

08000f10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b02      	ldr	r3, [pc, #8]	; (8000f20 <HAL_GetTick+0x10>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	20000090 	.word	0x20000090

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff fff0 	bl	8000f10 <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_Delay+0x44>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffe0 	bl	8000f10 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008

08000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <__NVIC_GetPriorityGrouping+0x18>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	f003 0307 	and.w	r3, r3, #7
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f7ff ff90 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff49 	bl	8000f6c <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff5e 	bl	8000fb4 <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff90 	bl	8001024 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5f 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ffb0 	bl	8001088 <SysTick_Config>
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001134:	b480      	push	{r7}
 8001136:	b08b      	sub	sp, #44	; 0x2c
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001146:	e169      	b.n	800141c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001148:	2201      	movs	r2, #1
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	69fa      	ldr	r2, [r7, #28]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	429a      	cmp	r2, r3
 8001162:	f040 8158 	bne.w	8001416 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4a9a      	ldr	r2, [pc, #616]	; (80013d4 <HAL_GPIO_Init+0x2a0>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d05e      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 8001170:	4a98      	ldr	r2, [pc, #608]	; (80013d4 <HAL_GPIO_Init+0x2a0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d875      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 8001176:	4a98      	ldr	r2, [pc, #608]	; (80013d8 <HAL_GPIO_Init+0x2a4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d058      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 800117c:	4a96      	ldr	r2, [pc, #600]	; (80013d8 <HAL_GPIO_Init+0x2a4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d86f      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 8001182:	4a96      	ldr	r2, [pc, #600]	; (80013dc <HAL_GPIO_Init+0x2a8>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d052      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 8001188:	4a94      	ldr	r2, [pc, #592]	; (80013dc <HAL_GPIO_Init+0x2a8>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d869      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 800118e:	4a94      	ldr	r2, [pc, #592]	; (80013e0 <HAL_GPIO_Init+0x2ac>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d04c      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 8001194:	4a92      	ldr	r2, [pc, #584]	; (80013e0 <HAL_GPIO_Init+0x2ac>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d863      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 800119a:	4a92      	ldr	r2, [pc, #584]	; (80013e4 <HAL_GPIO_Init+0x2b0>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d046      	beq.n	800122e <HAL_GPIO_Init+0xfa>
 80011a0:	4a90      	ldr	r2, [pc, #576]	; (80013e4 <HAL_GPIO_Init+0x2b0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d85d      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 80011a6:	2b12      	cmp	r3, #18
 80011a8:	d82a      	bhi.n	8001200 <HAL_GPIO_Init+0xcc>
 80011aa:	2b12      	cmp	r3, #18
 80011ac:	d859      	bhi.n	8001262 <HAL_GPIO_Init+0x12e>
 80011ae:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <HAL_GPIO_Init+0x80>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	0800122f 	.word	0x0800122f
 80011b8:	08001209 	.word	0x08001209
 80011bc:	0800121b 	.word	0x0800121b
 80011c0:	0800125d 	.word	0x0800125d
 80011c4:	08001263 	.word	0x08001263
 80011c8:	08001263 	.word	0x08001263
 80011cc:	08001263 	.word	0x08001263
 80011d0:	08001263 	.word	0x08001263
 80011d4:	08001263 	.word	0x08001263
 80011d8:	08001263 	.word	0x08001263
 80011dc:	08001263 	.word	0x08001263
 80011e0:	08001263 	.word	0x08001263
 80011e4:	08001263 	.word	0x08001263
 80011e8:	08001263 	.word	0x08001263
 80011ec:	08001263 	.word	0x08001263
 80011f0:	08001263 	.word	0x08001263
 80011f4:	08001263 	.word	0x08001263
 80011f8:	08001211 	.word	0x08001211
 80011fc:	08001225 	.word	0x08001225
 8001200:	4a79      	ldr	r2, [pc, #484]	; (80013e8 <HAL_GPIO_Init+0x2b4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d013      	beq.n	800122e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001206:	e02c      	b.n	8001262 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	623b      	str	r3, [r7, #32]
          break;
 800120e:	e029      	b.n	8001264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	3304      	adds	r3, #4
 8001216:	623b      	str	r3, [r7, #32]
          break;
 8001218:	e024      	b.n	8001264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	3308      	adds	r3, #8
 8001220:	623b      	str	r3, [r7, #32]
          break;
 8001222:	e01f      	b.n	8001264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	330c      	adds	r3, #12
 800122a:	623b      	str	r3, [r7, #32]
          break;
 800122c:	e01a      	b.n	8001264 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001236:	2304      	movs	r3, #4
 8001238:	623b      	str	r3, [r7, #32]
          break;
 800123a:	e013      	b.n	8001264 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d105      	bne.n	8001250 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001244:	2308      	movs	r3, #8
 8001246:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	611a      	str	r2, [r3, #16]
          break;
 800124e:	e009      	b.n	8001264 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001250:	2308      	movs	r3, #8
 8001252:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	615a      	str	r2, [r3, #20]
          break;
 800125a:	e003      	b.n	8001264 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
          break;
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x130>
          break;
 8001262:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2bff      	cmp	r3, #255	; 0xff
 8001268:	d801      	bhi.n	800126e <HAL_GPIO_Init+0x13a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	e001      	b.n	8001272 <HAL_GPIO_Init+0x13e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3304      	adds	r3, #4
 8001272:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	2bff      	cmp	r3, #255	; 0xff
 8001278:	d802      	bhi.n	8001280 <HAL_GPIO_Init+0x14c>
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	e002      	b.n	8001286 <HAL_GPIO_Init+0x152>
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	3b08      	subs	r3, #8
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	210f      	movs	r1, #15
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	fa01 f303 	lsl.w	r3, r1, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	401a      	ands	r2, r3
 8001298:	6a39      	ldr	r1, [r7, #32]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	431a      	orrs	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 80b1 	beq.w	8001416 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012b4:	4b4d      	ldr	r3, [pc, #308]	; (80013ec <HAL_GPIO_Init+0x2b8>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a4c      	ldr	r2, [pc, #304]	; (80013ec <HAL_GPIO_Init+0x2b8>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <HAL_GPIO_Init+0x2b8>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012cc:	4a48      	ldr	r2, [pc, #288]	; (80013f0 <HAL_GPIO_Init+0x2bc>)
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a40      	ldr	r2, [pc, #256]	; (80013f4 <HAL_GPIO_Init+0x2c0>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d013      	beq.n	8001320 <HAL_GPIO_Init+0x1ec>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a3f      	ldr	r2, [pc, #252]	; (80013f8 <HAL_GPIO_Init+0x2c4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d00d      	beq.n	800131c <HAL_GPIO_Init+0x1e8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a3e      	ldr	r2, [pc, #248]	; (80013fc <HAL_GPIO_Init+0x2c8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d007      	beq.n	8001318 <HAL_GPIO_Init+0x1e4>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a3d      	ldr	r2, [pc, #244]	; (8001400 <HAL_GPIO_Init+0x2cc>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d101      	bne.n	8001314 <HAL_GPIO_Init+0x1e0>
 8001310:	2303      	movs	r3, #3
 8001312:	e006      	b.n	8001322 <HAL_GPIO_Init+0x1ee>
 8001314:	2304      	movs	r3, #4
 8001316:	e004      	b.n	8001322 <HAL_GPIO_Init+0x1ee>
 8001318:	2302      	movs	r3, #2
 800131a:	e002      	b.n	8001322 <HAL_GPIO_Init+0x1ee>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <HAL_GPIO_Init+0x1ee>
 8001320:	2300      	movs	r3, #0
 8001322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001324:	f002 0203 	and.w	r2, r2, #3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	4093      	lsls	r3, r2
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001332:	492f      	ldr	r1, [pc, #188]	; (80013f0 <HAL_GPIO_Init+0x2bc>)
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800134c:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	492c      	ldr	r1, [pc, #176]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	608b      	str	r3, [r1, #8]
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	43db      	mvns	r3, r3
 8001362:	4928      	ldr	r1, [pc, #160]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 8001364:	4013      	ands	r3, r2
 8001366:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d006      	beq.n	8001382 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001374:	4b23      	ldr	r3, [pc, #140]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	4922      	ldr	r1, [pc, #136]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	60cb      	str	r3, [r1, #12]
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	43db      	mvns	r3, r3
 800138a:	491e      	ldr	r1, [pc, #120]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 800138c:	4013      	ands	r3, r2
 800138e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d006      	beq.n	80013aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	4918      	ldr	r1, [pc, #96]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	4914      	ldr	r1, [pc, #80]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d021      	beq.n	8001408 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	490e      	ldr	r1, [pc, #56]	; (8001404 <HAL_GPIO_Init+0x2d0>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]
 80013d0:	e021      	b.n	8001416 <HAL_GPIO_Init+0x2e2>
 80013d2:	bf00      	nop
 80013d4:	10320000 	.word	0x10320000
 80013d8:	10310000 	.word	0x10310000
 80013dc:	10220000 	.word	0x10220000
 80013e0:	10210000 	.word	0x10210000
 80013e4:	10120000 	.word	0x10120000
 80013e8:	10110000 	.word	0x10110000
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010000 	.word	0x40010000
 80013f4:	40010800 	.word	0x40010800
 80013f8:	40010c00 	.word	0x40010c00
 80013fc:	40011000 	.word	0x40011000
 8001400:	40011400 	.word	0x40011400
 8001404:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_GPIO_Init+0x304>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	43db      	mvns	r3, r3
 8001410:	4909      	ldr	r1, [pc, #36]	; (8001438 <HAL_GPIO_Init+0x304>)
 8001412:	4013      	ands	r3, r2
 8001414:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	3301      	adds	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	fa22 f303 	lsr.w	r3, r2, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	f47f ae8e 	bne.w	8001148 <HAL_GPIO_Init+0x14>
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	372c      	adds	r7, #44	; 0x2c
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	40010400 	.word	0x40010400

0800143c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001458:	e003      	b.n	8001462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	041a      	lsls	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	611a      	str	r2, [r3, #16]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e272      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8087 	beq.w	800159a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800148c:	4b92      	ldr	r3, [pc, #584]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b04      	cmp	r3, #4
 8001496:	d00c      	beq.n	80014b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001498:	4b8f      	ldr	r3, [pc, #572]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d112      	bne.n	80014ca <HAL_RCC_OscConfig+0x5e>
 80014a4:	4b8c      	ldr	r3, [pc, #560]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b0:	d10b      	bne.n	80014ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b2:	4b89      	ldr	r3, [pc, #548]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d06c      	beq.n	8001598 <HAL_RCC_OscConfig+0x12c>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d168      	bne.n	8001598 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e24c      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_OscConfig+0x76>
 80014d4:	4b80      	ldr	r3, [pc, #512]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a7f      	ldr	r2, [pc, #508]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	e02e      	b.n	8001540 <HAL_RCC_OscConfig+0xd4>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10c      	bne.n	8001504 <HAL_RCC_OscConfig+0x98>
 80014ea:	4b7b      	ldr	r3, [pc, #492]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a7a      	ldr	r2, [pc, #488]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	4b78      	ldr	r3, [pc, #480]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a77      	ldr	r2, [pc, #476]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e01d      	b.n	8001540 <HAL_RCC_OscConfig+0xd4>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0xbc>
 800150e:	4b72      	ldr	r3, [pc, #456]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a71      	ldr	r2, [pc, #452]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b6f      	ldr	r3, [pc, #444]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a6e      	ldr	r2, [pc, #440]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e00b      	b.n	8001540 <HAL_RCC_OscConfig+0xd4>
 8001528:	4b6b      	ldr	r3, [pc, #428]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a6a      	ldr	r2, [pc, #424]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800152e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b68      	ldr	r3, [pc, #416]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a67      	ldr	r2, [pc, #412]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800153a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d013      	beq.n	8001570 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fce2 	bl	8000f10 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff fcde 	bl	8000f10 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e200      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001562:	4b5d      	ldr	r3, [pc, #372]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0xe4>
 800156e:	e014      	b.n	800159a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fcce 	bl	8000f10 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fcca 	bl	8000f10 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e1ec      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158a:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x10c>
 8001596:	e000      	b.n	800159a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d063      	beq.n	800166e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015a6:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00b      	beq.n	80015ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015b2:	4b49      	ldr	r3, [pc, #292]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d11c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x18c>
 80015be:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d116      	bne.n	80015f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ca:	4b43      	ldr	r3, [pc, #268]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d005      	beq.n	80015e2 <HAL_RCC_OscConfig+0x176>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d001      	beq.n	80015e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e1c0      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4939      	ldr	r1, [pc, #228]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f6:	e03a      	b.n	800166e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d020      	beq.n	8001642 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001600:	4b36      	ldr	r3, [pc, #216]	; (80016dc <HAL_RCC_OscConfig+0x270>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff fc83 	bl	8000f10 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160e:	f7ff fc7f 	bl	8000f10 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e1a1      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001620:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4927      	ldr	r1, [pc, #156]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 800163c:	4313      	orrs	r3, r2
 800163e:	600b      	str	r3, [r1, #0]
 8001640:	e015      	b.n	800166e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001642:	4b26      	ldr	r3, [pc, #152]	; (80016dc <HAL_RCC_OscConfig+0x270>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff fc62 	bl	8000f10 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001650:	f7ff fc5e 	bl	8000f10 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e180      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d03a      	beq.n	80016f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d019      	beq.n	80016b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <HAL_RCC_OscConfig+0x274>)
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001688:	f7ff fc42 	bl	8000f10 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001690:	f7ff fc3e 	bl	8000f10 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e160      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016ae:	2001      	movs	r0, #1
 80016b0:	f000 faa6 	bl	8001c00 <RCC_Delay>
 80016b4:	e01c      	b.n	80016f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_RCC_OscConfig+0x274>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016bc:	f7ff fc28 	bl	8000f10 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c2:	e00f      	b.n	80016e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c4:	f7ff fc24 	bl	8000f10 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d908      	bls.n	80016e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e146      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000
 80016dc:	42420000 	.word	0x42420000
 80016e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e4:	4b92      	ldr	r3, [pc, #584]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1e9      	bne.n	80016c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80a6 	beq.w	800184a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001702:	4b8b      	ldr	r3, [pc, #556]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10d      	bne.n	800172a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b88      	ldr	r3, [pc, #544]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	4a87      	ldr	r2, [pc, #540]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	61d3      	str	r3, [r2, #28]
 800171a:	4b85      	ldr	r3, [pc, #532]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001726:	2301      	movs	r3, #1
 8001728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172a:	4b82      	ldr	r3, [pc, #520]	; (8001934 <HAL_RCC_OscConfig+0x4c8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001732:	2b00      	cmp	r3, #0
 8001734:	d118      	bne.n	8001768 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001736:	4b7f      	ldr	r3, [pc, #508]	; (8001934 <HAL_RCC_OscConfig+0x4c8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a7e      	ldr	r2, [pc, #504]	; (8001934 <HAL_RCC_OscConfig+0x4c8>)
 800173c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001742:	f7ff fbe5 	bl	8000f10 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174a:	f7ff fbe1 	bl	8000f10 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b64      	cmp	r3, #100	; 0x64
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e103      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175c:	4b75      	ldr	r3, [pc, #468]	; (8001934 <HAL_RCC_OscConfig+0x4c8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d106      	bne.n	800177e <HAL_RCC_OscConfig+0x312>
 8001770:	4b6f      	ldr	r3, [pc, #444]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4a6e      	ldr	r2, [pc, #440]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	e02d      	b.n	80017da <HAL_RCC_OscConfig+0x36e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x334>
 8001786:	4b6a      	ldr	r3, [pc, #424]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4a69      	ldr	r2, [pc, #420]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6213      	str	r3, [r2, #32]
 8001792:	4b67      	ldr	r3, [pc, #412]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	4a66      	ldr	r2, [pc, #408]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	f023 0304 	bic.w	r3, r3, #4
 800179c:	6213      	str	r3, [r2, #32]
 800179e:	e01c      	b.n	80017da <HAL_RCC_OscConfig+0x36e>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2b05      	cmp	r3, #5
 80017a6:	d10c      	bne.n	80017c2 <HAL_RCC_OscConfig+0x356>
 80017a8:	4b61      	ldr	r3, [pc, #388]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4a60      	ldr	r2, [pc, #384]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	6213      	str	r3, [r2, #32]
 80017b4:	4b5e      	ldr	r3, [pc, #376]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4a5d      	ldr	r2, [pc, #372]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6213      	str	r3, [r2, #32]
 80017c0:	e00b      	b.n	80017da <HAL_RCC_OscConfig+0x36e>
 80017c2:	4b5b      	ldr	r3, [pc, #364]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4a5a      	ldr	r2, [pc, #360]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	6213      	str	r3, [r2, #32]
 80017ce:	4b58      	ldr	r3, [pc, #352]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	4a57      	ldr	r2, [pc, #348]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	f023 0304 	bic.w	r3, r3, #4
 80017d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d015      	beq.n	800180e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e2:	f7ff fb95 	bl	8000f10 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e8:	e00a      	b.n	8001800 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ea:	f7ff fb91 	bl	8000f10 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e0b1      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001800:	4b4b      	ldr	r3, [pc, #300]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0ee      	beq.n	80017ea <HAL_RCC_OscConfig+0x37e>
 800180c:	e014      	b.n	8001838 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180e:	f7ff fb7f 	bl	8000f10 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001814:	e00a      	b.n	800182c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001816:	f7ff fb7b 	bl	8000f10 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	f241 3288 	movw	r2, #5000	; 0x1388
 8001824:	4293      	cmp	r3, r2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e09b      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182c:	4b40      	ldr	r3, [pc, #256]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1ee      	bne.n	8001816 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d105      	bne.n	800184a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183e:	4b3c      	ldr	r3, [pc, #240]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	4a3b      	ldr	r2, [pc, #236]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001848:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8087 	beq.w	8001962 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001854:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b08      	cmp	r3, #8
 800185e:	d061      	beq.n	8001924 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d146      	bne.n	80018f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001868:	4b33      	ldr	r3, [pc, #204]	; (8001938 <HAL_RCC_OscConfig+0x4cc>)
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7ff fb4f 	bl	8000f10 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001876:	f7ff fb4b 	bl	8000f10 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e06d      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f0      	bne.n	8001876 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189c:	d108      	bne.n	80018b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800189e:	4b24      	ldr	r3, [pc, #144]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	4921      	ldr	r1, [pc, #132]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b0:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a19      	ldr	r1, [r3, #32]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	430b      	orrs	r3, r1
 80018c2:	491b      	ldr	r1, [pc, #108]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_RCC_OscConfig+0x4cc>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ce:	f7ff fb1f 	bl	8000f10 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d6:	f7ff fb1b 	bl	8000f10 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e03d      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x46a>
 80018f4:	e035      	b.n	8001962 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_RCC_OscConfig+0x4cc>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fb08 	bl	8000f10 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff fb04 	bl	8000f10 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e026      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x498>
 8001922:	e01e      	b.n	8001962 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d107      	bne.n	800193c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e019      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
 8001930:	40021000 	.word	0x40021000
 8001934:	40007000 	.word	0x40007000
 8001938:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_RCC_OscConfig+0x500>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	429a      	cmp	r2, r3
 800194e:	d106      	bne.n	800195e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d001      	beq.n	8001962 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000

08001970 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0d0      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001984:	4b6a      	ldr	r3, [pc, #424]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d910      	bls.n	80019b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b67      	ldr	r3, [pc, #412]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 0207 	bic.w	r2, r3, #7
 800199a:	4965      	ldr	r1, [pc, #404]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0b8      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d020      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019cc:	4b59      	ldr	r3, [pc, #356]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4a58      	ldr	r2, [pc, #352]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e4:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	4a52      	ldr	r2, [pc, #328]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	494d      	ldr	r1, [pc, #308]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d040      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d107      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d115      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e07f      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2e:	4b41      	ldr	r3, [pc, #260]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e073      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3e:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e06b      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f023 0203 	bic.w	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4936      	ldr	r1, [pc, #216]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a60:	f7ff fa56 	bl	8000f10 <HAL_GetTick>
 8001a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a68:	f7ff fa52 	bl	8000f10 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e053      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 020c 	and.w	r2, r3, #12
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d1eb      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d210      	bcs.n	8001ac0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 0207 	bic.w	r2, r3, #7
 8001aa6:	4922      	ldr	r1, [pc, #136]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e032      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4916      	ldr	r1, [pc, #88]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d009      	beq.n	8001afe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	490e      	ldr	r1, [pc, #56]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001afe:	f000 f821 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8001b02:	4602      	mov	r2, r0
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	490a      	ldr	r1, [pc, #40]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001b10:	5ccb      	ldrb	r3, [r1, r3]
 8001b12:	fa22 f303 	lsr.w	r3, r2, r3
 8001b16:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <HAL_RCC_ClockConfig+0x1cc>)
 8001b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_ClockConfig+0x1d0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff f9b4 	bl	8000e8c <HAL_InitTick>

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40022000 	.word	0x40022000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	080025f8 	.word	0x080025f8
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000004 	.word	0x20000004

08001b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d002      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0x30>
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d003      	beq.n	8001b7a <HAL_RCC_GetSysClockFreq+0x36>
 8001b72:	e027      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8001b76:	613b      	str	r3, [r7, #16]
      break;
 8001b78:	e027      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	0c9b      	lsrs	r3, r3, #18
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b84:	5cd3      	ldrb	r3, [r2, r3]
 8001b86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d010      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	0c5b      	lsrs	r3, r3, #17
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	4a11      	ldr	r2, [pc, #68]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ba0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ba6:	fb03 f202 	mul.w	r2, r3, r2
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	e004      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	613b      	str	r3, [r7, #16]
      break;
 8001bc2:	e002      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8001bc6:	613b      	str	r3, [r7, #16]
      break;
 8001bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bca:	693b      	ldr	r3, [r7, #16]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	371c      	adds	r7, #28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	007a1200 	.word	0x007a1200
 8001be0:	08002608 	.word	0x08002608
 8001be4:	08002618 	.word	0x08002618
 8001be8:	003d0900 	.word	0x003d0900

08001bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf0:	4b02      	ldr	r3, [pc, #8]	; (8001bfc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	20000000 	.word	0x20000000

08001c00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <RCC_Delay+0x34>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <RCC_Delay+0x38>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	0a5b      	lsrs	r3, r3, #9
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c1c:	bf00      	nop
  }
  while (Delay --);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1e5a      	subs	r2, r3, #1
 8001c22:	60fa      	str	r2, [r7, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f9      	bne.n	8001c1c <RCC_Delay+0x1c>
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	20000000 	.word	0x20000000
 8001c38:	10624dd3 	.word	0x10624dd3

08001c3c <__errno>:
 8001c3c:	4b01      	ldr	r3, [pc, #4]	; (8001c44 <__errno+0x8>)
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	2000000c 	.word	0x2000000c

08001c48 <__libc_init_array>:
 8001c48:	b570      	push	{r4, r5, r6, lr}
 8001c4a:	2600      	movs	r6, #0
 8001c4c:	4d0c      	ldr	r5, [pc, #48]	; (8001c80 <__libc_init_array+0x38>)
 8001c4e:	4c0d      	ldr	r4, [pc, #52]	; (8001c84 <__libc_init_array+0x3c>)
 8001c50:	1b64      	subs	r4, r4, r5
 8001c52:	10a4      	asrs	r4, r4, #2
 8001c54:	42a6      	cmp	r6, r4
 8001c56:	d109      	bne.n	8001c6c <__libc_init_array+0x24>
 8001c58:	f000 fc9c 	bl	8002594 <_init>
 8001c5c:	2600      	movs	r6, #0
 8001c5e:	4d0a      	ldr	r5, [pc, #40]	; (8001c88 <__libc_init_array+0x40>)
 8001c60:	4c0a      	ldr	r4, [pc, #40]	; (8001c8c <__libc_init_array+0x44>)
 8001c62:	1b64      	subs	r4, r4, r5
 8001c64:	10a4      	asrs	r4, r4, #2
 8001c66:	42a6      	cmp	r6, r4
 8001c68:	d105      	bne.n	8001c76 <__libc_init_array+0x2e>
 8001c6a:	bd70      	pop	{r4, r5, r6, pc}
 8001c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c70:	4798      	blx	r3
 8001c72:	3601      	adds	r6, #1
 8001c74:	e7ee      	b.n	8001c54 <__libc_init_array+0xc>
 8001c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c7a:	4798      	blx	r3
 8001c7c:	3601      	adds	r6, #1
 8001c7e:	e7f2      	b.n	8001c66 <__libc_init_array+0x1e>
 8001c80:	08002650 	.word	0x08002650
 8001c84:	08002650 	.word	0x08002650
 8001c88:	08002650 	.word	0x08002650
 8001c8c:	08002654 	.word	0x08002654

08001c90 <memset>:
 8001c90:	4603      	mov	r3, r0
 8001c92:	4402      	add	r2, r0
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d100      	bne.n	8001c9a <memset+0xa>
 8001c98:	4770      	bx	lr
 8001c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8001c9e:	e7f9      	b.n	8001c94 <memset+0x4>

08001ca0 <siprintf>:
 8001ca0:	b40e      	push	{r1, r2, r3}
 8001ca2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001ca6:	b500      	push	{lr}
 8001ca8:	b09c      	sub	sp, #112	; 0x70
 8001caa:	ab1d      	add	r3, sp, #116	; 0x74
 8001cac:	9002      	str	r0, [sp, #8]
 8001cae:	9006      	str	r0, [sp, #24]
 8001cb0:	9107      	str	r1, [sp, #28]
 8001cb2:	9104      	str	r1, [sp, #16]
 8001cb4:	4808      	ldr	r0, [pc, #32]	; (8001cd8 <siprintf+0x38>)
 8001cb6:	4909      	ldr	r1, [pc, #36]	; (8001cdc <siprintf+0x3c>)
 8001cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8001cbc:	9105      	str	r1, [sp, #20]
 8001cbe:	6800      	ldr	r0, [r0, #0]
 8001cc0:	a902      	add	r1, sp, #8
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	f000 f868 	bl	8001d98 <_svfiprintf_r>
 8001cc8:	2200      	movs	r2, #0
 8001cca:	9b02      	ldr	r3, [sp, #8]
 8001ccc:	701a      	strb	r2, [r3, #0]
 8001cce:	b01c      	add	sp, #112	; 0x70
 8001cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8001cd4:	b003      	add	sp, #12
 8001cd6:	4770      	bx	lr
 8001cd8:	2000000c 	.word	0x2000000c
 8001cdc:	ffff0208 	.word	0xffff0208

08001ce0 <__ssputs_r>:
 8001ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ce4:	688e      	ldr	r6, [r1, #8]
 8001ce6:	4682      	mov	sl, r0
 8001ce8:	429e      	cmp	r6, r3
 8001cea:	460c      	mov	r4, r1
 8001cec:	4690      	mov	r8, r2
 8001cee:	461f      	mov	r7, r3
 8001cf0:	d838      	bhi.n	8001d64 <__ssputs_r+0x84>
 8001cf2:	898a      	ldrh	r2, [r1, #12]
 8001cf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001cf8:	d032      	beq.n	8001d60 <__ssputs_r+0x80>
 8001cfa:	6825      	ldr	r5, [r4, #0]
 8001cfc:	6909      	ldr	r1, [r1, #16]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	eba5 0901 	sub.w	r9, r5, r1
 8001d04:	6965      	ldr	r5, [r4, #20]
 8001d06:	444b      	add	r3, r9
 8001d08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001d0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001d10:	106d      	asrs	r5, r5, #1
 8001d12:	429d      	cmp	r5, r3
 8001d14:	bf38      	it	cc
 8001d16:	461d      	movcc	r5, r3
 8001d18:	0553      	lsls	r3, r2, #21
 8001d1a:	d531      	bpl.n	8001d80 <__ssputs_r+0xa0>
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	f000 fb6f 	bl	8002400 <_malloc_r>
 8001d22:	4606      	mov	r6, r0
 8001d24:	b950      	cbnz	r0, 8001d3c <__ssputs_r+0x5c>
 8001d26:	230c      	movs	r3, #12
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f8ca 3000 	str.w	r3, [sl]
 8001d30:	89a3      	ldrh	r3, [r4, #12]
 8001d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d36:	81a3      	strh	r3, [r4, #12]
 8001d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d3c:	464a      	mov	r2, r9
 8001d3e:	6921      	ldr	r1, [r4, #16]
 8001d40:	f000 face 	bl	80022e0 <memcpy>
 8001d44:	89a3      	ldrh	r3, [r4, #12]
 8001d46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d4e:	81a3      	strh	r3, [r4, #12]
 8001d50:	6126      	str	r6, [r4, #16]
 8001d52:	444e      	add	r6, r9
 8001d54:	6026      	str	r6, [r4, #0]
 8001d56:	463e      	mov	r6, r7
 8001d58:	6165      	str	r5, [r4, #20]
 8001d5a:	eba5 0509 	sub.w	r5, r5, r9
 8001d5e:	60a5      	str	r5, [r4, #8]
 8001d60:	42be      	cmp	r6, r7
 8001d62:	d900      	bls.n	8001d66 <__ssputs_r+0x86>
 8001d64:	463e      	mov	r6, r7
 8001d66:	4632      	mov	r2, r6
 8001d68:	4641      	mov	r1, r8
 8001d6a:	6820      	ldr	r0, [r4, #0]
 8001d6c:	f000 fac6 	bl	80022fc <memmove>
 8001d70:	68a3      	ldr	r3, [r4, #8]
 8001d72:	2000      	movs	r0, #0
 8001d74:	1b9b      	subs	r3, r3, r6
 8001d76:	60a3      	str	r3, [r4, #8]
 8001d78:	6823      	ldr	r3, [r4, #0]
 8001d7a:	4433      	add	r3, r6
 8001d7c:	6023      	str	r3, [r4, #0]
 8001d7e:	e7db      	b.n	8001d38 <__ssputs_r+0x58>
 8001d80:	462a      	mov	r2, r5
 8001d82:	f000 fbb1 	bl	80024e8 <_realloc_r>
 8001d86:	4606      	mov	r6, r0
 8001d88:	2800      	cmp	r0, #0
 8001d8a:	d1e1      	bne.n	8001d50 <__ssputs_r+0x70>
 8001d8c:	4650      	mov	r0, sl
 8001d8e:	6921      	ldr	r1, [r4, #16]
 8001d90:	f000 face 	bl	8002330 <_free_r>
 8001d94:	e7c7      	b.n	8001d26 <__ssputs_r+0x46>
	...

08001d98 <_svfiprintf_r>:
 8001d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d9c:	4698      	mov	r8, r3
 8001d9e:	898b      	ldrh	r3, [r1, #12]
 8001da0:	4607      	mov	r7, r0
 8001da2:	061b      	lsls	r3, r3, #24
 8001da4:	460d      	mov	r5, r1
 8001da6:	4614      	mov	r4, r2
 8001da8:	b09d      	sub	sp, #116	; 0x74
 8001daa:	d50e      	bpl.n	8001dca <_svfiprintf_r+0x32>
 8001dac:	690b      	ldr	r3, [r1, #16]
 8001dae:	b963      	cbnz	r3, 8001dca <_svfiprintf_r+0x32>
 8001db0:	2140      	movs	r1, #64	; 0x40
 8001db2:	f000 fb25 	bl	8002400 <_malloc_r>
 8001db6:	6028      	str	r0, [r5, #0]
 8001db8:	6128      	str	r0, [r5, #16]
 8001dba:	b920      	cbnz	r0, 8001dc6 <_svfiprintf_r+0x2e>
 8001dbc:	230c      	movs	r3, #12
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	e0d1      	b.n	8001f6a <_svfiprintf_r+0x1d2>
 8001dc6:	2340      	movs	r3, #64	; 0x40
 8001dc8:	616b      	str	r3, [r5, #20]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8001dce:	2320      	movs	r3, #32
 8001dd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001dd4:	2330      	movs	r3, #48	; 0x30
 8001dd6:	f04f 0901 	mov.w	r9, #1
 8001dda:	f8cd 800c 	str.w	r8, [sp, #12]
 8001dde:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001f84 <_svfiprintf_r+0x1ec>
 8001de2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001de6:	4623      	mov	r3, r4
 8001de8:	469a      	mov	sl, r3
 8001dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001dee:	b10a      	cbz	r2, 8001df4 <_svfiprintf_r+0x5c>
 8001df0:	2a25      	cmp	r2, #37	; 0x25
 8001df2:	d1f9      	bne.n	8001de8 <_svfiprintf_r+0x50>
 8001df4:	ebba 0b04 	subs.w	fp, sl, r4
 8001df8:	d00b      	beq.n	8001e12 <_svfiprintf_r+0x7a>
 8001dfa:	465b      	mov	r3, fp
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	4629      	mov	r1, r5
 8001e00:	4638      	mov	r0, r7
 8001e02:	f7ff ff6d 	bl	8001ce0 <__ssputs_r>
 8001e06:	3001      	adds	r0, #1
 8001e08:	f000 80aa 	beq.w	8001f60 <_svfiprintf_r+0x1c8>
 8001e0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001e0e:	445a      	add	r2, fp
 8001e10:	9209      	str	r2, [sp, #36]	; 0x24
 8001e12:	f89a 3000 	ldrb.w	r3, [sl]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 80a2 	beq.w	8001f60 <_svfiprintf_r+0x1c8>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e26:	f10a 0a01 	add.w	sl, sl, #1
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	9307      	str	r3, [sp, #28]
 8001e2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001e32:	931a      	str	r3, [sp, #104]	; 0x68
 8001e34:	4654      	mov	r4, sl
 8001e36:	2205      	movs	r2, #5
 8001e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e3c:	4851      	ldr	r0, [pc, #324]	; (8001f84 <_svfiprintf_r+0x1ec>)
 8001e3e:	f000 fa41 	bl	80022c4 <memchr>
 8001e42:	9a04      	ldr	r2, [sp, #16]
 8001e44:	b9d8      	cbnz	r0, 8001e7e <_svfiprintf_r+0xe6>
 8001e46:	06d0      	lsls	r0, r2, #27
 8001e48:	bf44      	itt	mi
 8001e4a:	2320      	movmi	r3, #32
 8001e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e50:	0711      	lsls	r1, r2, #28
 8001e52:	bf44      	itt	mi
 8001e54:	232b      	movmi	r3, #43	; 0x2b
 8001e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8001e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8001e60:	d015      	beq.n	8001e8e <_svfiprintf_r+0xf6>
 8001e62:	4654      	mov	r4, sl
 8001e64:	2000      	movs	r0, #0
 8001e66:	f04f 0c0a 	mov.w	ip, #10
 8001e6a:	9a07      	ldr	r2, [sp, #28]
 8001e6c:	4621      	mov	r1, r4
 8001e6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e72:	3b30      	subs	r3, #48	; 0x30
 8001e74:	2b09      	cmp	r3, #9
 8001e76:	d94e      	bls.n	8001f16 <_svfiprintf_r+0x17e>
 8001e78:	b1b0      	cbz	r0, 8001ea8 <_svfiprintf_r+0x110>
 8001e7a:	9207      	str	r2, [sp, #28]
 8001e7c:	e014      	b.n	8001ea8 <_svfiprintf_r+0x110>
 8001e7e:	eba0 0308 	sub.w	r3, r0, r8
 8001e82:	fa09 f303 	lsl.w	r3, r9, r3
 8001e86:	4313      	orrs	r3, r2
 8001e88:	46a2      	mov	sl, r4
 8001e8a:	9304      	str	r3, [sp, #16]
 8001e8c:	e7d2      	b.n	8001e34 <_svfiprintf_r+0x9c>
 8001e8e:	9b03      	ldr	r3, [sp, #12]
 8001e90:	1d19      	adds	r1, r3, #4
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	9103      	str	r1, [sp, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bfbb      	ittet	lt
 8001e9a:	425b      	neglt	r3, r3
 8001e9c:	f042 0202 	orrlt.w	r2, r2, #2
 8001ea0:	9307      	strge	r3, [sp, #28]
 8001ea2:	9307      	strlt	r3, [sp, #28]
 8001ea4:	bfb8      	it	lt
 8001ea6:	9204      	strlt	r2, [sp, #16]
 8001ea8:	7823      	ldrb	r3, [r4, #0]
 8001eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8001eac:	d10c      	bne.n	8001ec8 <_svfiprintf_r+0x130>
 8001eae:	7863      	ldrb	r3, [r4, #1]
 8001eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8001eb2:	d135      	bne.n	8001f20 <_svfiprintf_r+0x188>
 8001eb4:	9b03      	ldr	r3, [sp, #12]
 8001eb6:	3402      	adds	r4, #2
 8001eb8:	1d1a      	adds	r2, r3, #4
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	9203      	str	r2, [sp, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bfb8      	it	lt
 8001ec2:	f04f 33ff 	movlt.w	r3, #4294967295
 8001ec6:	9305      	str	r3, [sp, #20]
 8001ec8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001f88 <_svfiprintf_r+0x1f0>
 8001ecc:	2203      	movs	r2, #3
 8001ece:	4650      	mov	r0, sl
 8001ed0:	7821      	ldrb	r1, [r4, #0]
 8001ed2:	f000 f9f7 	bl	80022c4 <memchr>
 8001ed6:	b140      	cbz	r0, 8001eea <_svfiprintf_r+0x152>
 8001ed8:	2340      	movs	r3, #64	; 0x40
 8001eda:	eba0 000a 	sub.w	r0, r0, sl
 8001ede:	fa03 f000 	lsl.w	r0, r3, r0
 8001ee2:	9b04      	ldr	r3, [sp, #16]
 8001ee4:	3401      	adds	r4, #1
 8001ee6:	4303      	orrs	r3, r0
 8001ee8:	9304      	str	r3, [sp, #16]
 8001eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001eee:	2206      	movs	r2, #6
 8001ef0:	4826      	ldr	r0, [pc, #152]	; (8001f8c <_svfiprintf_r+0x1f4>)
 8001ef2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ef6:	f000 f9e5 	bl	80022c4 <memchr>
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d038      	beq.n	8001f70 <_svfiprintf_r+0x1d8>
 8001efe:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <_svfiprintf_r+0x1f8>)
 8001f00:	bb1b      	cbnz	r3, 8001f4a <_svfiprintf_r+0x1b2>
 8001f02:	9b03      	ldr	r3, [sp, #12]
 8001f04:	3307      	adds	r3, #7
 8001f06:	f023 0307 	bic.w	r3, r3, #7
 8001f0a:	3308      	adds	r3, #8
 8001f0c:	9303      	str	r3, [sp, #12]
 8001f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f10:	4433      	add	r3, r6
 8001f12:	9309      	str	r3, [sp, #36]	; 0x24
 8001f14:	e767      	b.n	8001de6 <_svfiprintf_r+0x4e>
 8001f16:	460c      	mov	r4, r1
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f1e:	e7a5      	b.n	8001e6c <_svfiprintf_r+0xd4>
 8001f20:	2300      	movs	r3, #0
 8001f22:	f04f 0c0a 	mov.w	ip, #10
 8001f26:	4619      	mov	r1, r3
 8001f28:	3401      	adds	r4, #1
 8001f2a:	9305      	str	r3, [sp, #20]
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f32:	3a30      	subs	r2, #48	; 0x30
 8001f34:	2a09      	cmp	r2, #9
 8001f36:	d903      	bls.n	8001f40 <_svfiprintf_r+0x1a8>
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0c5      	beq.n	8001ec8 <_svfiprintf_r+0x130>
 8001f3c:	9105      	str	r1, [sp, #20]
 8001f3e:	e7c3      	b.n	8001ec8 <_svfiprintf_r+0x130>
 8001f40:	4604      	mov	r4, r0
 8001f42:	2301      	movs	r3, #1
 8001f44:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f48:	e7f0      	b.n	8001f2c <_svfiprintf_r+0x194>
 8001f4a:	ab03      	add	r3, sp, #12
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	462a      	mov	r2, r5
 8001f50:	4638      	mov	r0, r7
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <_svfiprintf_r+0x1fc>)
 8001f54:	a904      	add	r1, sp, #16
 8001f56:	f3af 8000 	nop.w
 8001f5a:	1c42      	adds	r2, r0, #1
 8001f5c:	4606      	mov	r6, r0
 8001f5e:	d1d6      	bne.n	8001f0e <_svfiprintf_r+0x176>
 8001f60:	89ab      	ldrh	r3, [r5, #12]
 8001f62:	065b      	lsls	r3, r3, #25
 8001f64:	f53f af2c 	bmi.w	8001dc0 <_svfiprintf_r+0x28>
 8001f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f6a:	b01d      	add	sp, #116	; 0x74
 8001f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f70:	ab03      	add	r3, sp, #12
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	462a      	mov	r2, r5
 8001f76:	4638      	mov	r0, r7
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <_svfiprintf_r+0x1fc>)
 8001f7a:	a904      	add	r1, sp, #16
 8001f7c:	f000 f87c 	bl	8002078 <_printf_i>
 8001f80:	e7eb      	b.n	8001f5a <_svfiprintf_r+0x1c2>
 8001f82:	bf00      	nop
 8001f84:	0800261a 	.word	0x0800261a
 8001f88:	08002620 	.word	0x08002620
 8001f8c:	08002624 	.word	0x08002624
 8001f90:	00000000 	.word	0x00000000
 8001f94:	08001ce1 	.word	0x08001ce1

08001f98 <_printf_common>:
 8001f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f9c:	4616      	mov	r6, r2
 8001f9e:	4699      	mov	r9, r3
 8001fa0:	688a      	ldr	r2, [r1, #8]
 8001fa2:	690b      	ldr	r3, [r1, #16]
 8001fa4:	4607      	mov	r7, r0
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	bfb8      	it	lt
 8001faa:	4613      	movlt	r3, r2
 8001fac:	6033      	str	r3, [r6, #0]
 8001fae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001fb2:	460c      	mov	r4, r1
 8001fb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001fb8:	b10a      	cbz	r2, 8001fbe <_printf_common+0x26>
 8001fba:	3301      	adds	r3, #1
 8001fbc:	6033      	str	r3, [r6, #0]
 8001fbe:	6823      	ldr	r3, [r4, #0]
 8001fc0:	0699      	lsls	r1, r3, #26
 8001fc2:	bf42      	ittt	mi
 8001fc4:	6833      	ldrmi	r3, [r6, #0]
 8001fc6:	3302      	addmi	r3, #2
 8001fc8:	6033      	strmi	r3, [r6, #0]
 8001fca:	6825      	ldr	r5, [r4, #0]
 8001fcc:	f015 0506 	ands.w	r5, r5, #6
 8001fd0:	d106      	bne.n	8001fe0 <_printf_common+0x48>
 8001fd2:	f104 0a19 	add.w	sl, r4, #25
 8001fd6:	68e3      	ldr	r3, [r4, #12]
 8001fd8:	6832      	ldr	r2, [r6, #0]
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	42ab      	cmp	r3, r5
 8001fde:	dc28      	bgt.n	8002032 <_printf_common+0x9a>
 8001fe0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001fe4:	1e13      	subs	r3, r2, #0
 8001fe6:	6822      	ldr	r2, [r4, #0]
 8001fe8:	bf18      	it	ne
 8001fea:	2301      	movne	r3, #1
 8001fec:	0692      	lsls	r2, r2, #26
 8001fee:	d42d      	bmi.n	800204c <_printf_common+0xb4>
 8001ff0:	4649      	mov	r1, r9
 8001ff2:	4638      	mov	r0, r7
 8001ff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ff8:	47c0      	blx	r8
 8001ffa:	3001      	adds	r0, #1
 8001ffc:	d020      	beq.n	8002040 <_printf_common+0xa8>
 8001ffe:	6823      	ldr	r3, [r4, #0]
 8002000:	68e5      	ldr	r5, [r4, #12]
 8002002:	f003 0306 	and.w	r3, r3, #6
 8002006:	2b04      	cmp	r3, #4
 8002008:	bf18      	it	ne
 800200a:	2500      	movne	r5, #0
 800200c:	6832      	ldr	r2, [r6, #0]
 800200e:	f04f 0600 	mov.w	r6, #0
 8002012:	68a3      	ldr	r3, [r4, #8]
 8002014:	bf08      	it	eq
 8002016:	1aad      	subeq	r5, r5, r2
 8002018:	6922      	ldr	r2, [r4, #16]
 800201a:	bf08      	it	eq
 800201c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002020:	4293      	cmp	r3, r2
 8002022:	bfc4      	itt	gt
 8002024:	1a9b      	subgt	r3, r3, r2
 8002026:	18ed      	addgt	r5, r5, r3
 8002028:	341a      	adds	r4, #26
 800202a:	42b5      	cmp	r5, r6
 800202c:	d11a      	bne.n	8002064 <_printf_common+0xcc>
 800202e:	2000      	movs	r0, #0
 8002030:	e008      	b.n	8002044 <_printf_common+0xac>
 8002032:	2301      	movs	r3, #1
 8002034:	4652      	mov	r2, sl
 8002036:	4649      	mov	r1, r9
 8002038:	4638      	mov	r0, r7
 800203a:	47c0      	blx	r8
 800203c:	3001      	adds	r0, #1
 800203e:	d103      	bne.n	8002048 <_printf_common+0xb0>
 8002040:	f04f 30ff 	mov.w	r0, #4294967295
 8002044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002048:	3501      	adds	r5, #1
 800204a:	e7c4      	b.n	8001fd6 <_printf_common+0x3e>
 800204c:	2030      	movs	r0, #48	; 0x30
 800204e:	18e1      	adds	r1, r4, r3
 8002050:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800205a:	4422      	add	r2, r4
 800205c:	3302      	adds	r3, #2
 800205e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002062:	e7c5      	b.n	8001ff0 <_printf_common+0x58>
 8002064:	2301      	movs	r3, #1
 8002066:	4622      	mov	r2, r4
 8002068:	4649      	mov	r1, r9
 800206a:	4638      	mov	r0, r7
 800206c:	47c0      	blx	r8
 800206e:	3001      	adds	r0, #1
 8002070:	d0e6      	beq.n	8002040 <_printf_common+0xa8>
 8002072:	3601      	adds	r6, #1
 8002074:	e7d9      	b.n	800202a <_printf_common+0x92>
	...

08002078 <_printf_i>:
 8002078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800207c:	7e0f      	ldrb	r7, [r1, #24]
 800207e:	4691      	mov	r9, r2
 8002080:	2f78      	cmp	r7, #120	; 0x78
 8002082:	4680      	mov	r8, r0
 8002084:	460c      	mov	r4, r1
 8002086:	469a      	mov	sl, r3
 8002088:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800208a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800208e:	d807      	bhi.n	80020a0 <_printf_i+0x28>
 8002090:	2f62      	cmp	r7, #98	; 0x62
 8002092:	d80a      	bhi.n	80020aa <_printf_i+0x32>
 8002094:	2f00      	cmp	r7, #0
 8002096:	f000 80d9 	beq.w	800224c <_printf_i+0x1d4>
 800209a:	2f58      	cmp	r7, #88	; 0x58
 800209c:	f000 80a4 	beq.w	80021e8 <_printf_i+0x170>
 80020a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80020a8:	e03a      	b.n	8002120 <_printf_i+0xa8>
 80020aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80020ae:	2b15      	cmp	r3, #21
 80020b0:	d8f6      	bhi.n	80020a0 <_printf_i+0x28>
 80020b2:	a101      	add	r1, pc, #4	; (adr r1, 80020b8 <_printf_i+0x40>)
 80020b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80020b8:	08002111 	.word	0x08002111
 80020bc:	08002125 	.word	0x08002125
 80020c0:	080020a1 	.word	0x080020a1
 80020c4:	080020a1 	.word	0x080020a1
 80020c8:	080020a1 	.word	0x080020a1
 80020cc:	080020a1 	.word	0x080020a1
 80020d0:	08002125 	.word	0x08002125
 80020d4:	080020a1 	.word	0x080020a1
 80020d8:	080020a1 	.word	0x080020a1
 80020dc:	080020a1 	.word	0x080020a1
 80020e0:	080020a1 	.word	0x080020a1
 80020e4:	08002233 	.word	0x08002233
 80020e8:	08002155 	.word	0x08002155
 80020ec:	08002215 	.word	0x08002215
 80020f0:	080020a1 	.word	0x080020a1
 80020f4:	080020a1 	.word	0x080020a1
 80020f8:	08002255 	.word	0x08002255
 80020fc:	080020a1 	.word	0x080020a1
 8002100:	08002155 	.word	0x08002155
 8002104:	080020a1 	.word	0x080020a1
 8002108:	080020a1 	.word	0x080020a1
 800210c:	0800221d 	.word	0x0800221d
 8002110:	682b      	ldr	r3, [r5, #0]
 8002112:	1d1a      	adds	r2, r3, #4
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	602a      	str	r2, [r5, #0]
 8002118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800211c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002120:	2301      	movs	r3, #1
 8002122:	e0a4      	b.n	800226e <_printf_i+0x1f6>
 8002124:	6820      	ldr	r0, [r4, #0]
 8002126:	6829      	ldr	r1, [r5, #0]
 8002128:	0606      	lsls	r6, r0, #24
 800212a:	f101 0304 	add.w	r3, r1, #4
 800212e:	d50a      	bpl.n	8002146 <_printf_i+0xce>
 8002130:	680e      	ldr	r6, [r1, #0]
 8002132:	602b      	str	r3, [r5, #0]
 8002134:	2e00      	cmp	r6, #0
 8002136:	da03      	bge.n	8002140 <_printf_i+0xc8>
 8002138:	232d      	movs	r3, #45	; 0x2d
 800213a:	4276      	negs	r6, r6
 800213c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002140:	230a      	movs	r3, #10
 8002142:	485e      	ldr	r0, [pc, #376]	; (80022bc <_printf_i+0x244>)
 8002144:	e019      	b.n	800217a <_printf_i+0x102>
 8002146:	680e      	ldr	r6, [r1, #0]
 8002148:	f010 0f40 	tst.w	r0, #64	; 0x40
 800214c:	602b      	str	r3, [r5, #0]
 800214e:	bf18      	it	ne
 8002150:	b236      	sxthne	r6, r6
 8002152:	e7ef      	b.n	8002134 <_printf_i+0xbc>
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	6820      	ldr	r0, [r4, #0]
 8002158:	1d19      	adds	r1, r3, #4
 800215a:	6029      	str	r1, [r5, #0]
 800215c:	0601      	lsls	r1, r0, #24
 800215e:	d501      	bpl.n	8002164 <_printf_i+0xec>
 8002160:	681e      	ldr	r6, [r3, #0]
 8002162:	e002      	b.n	800216a <_printf_i+0xf2>
 8002164:	0646      	lsls	r6, r0, #25
 8002166:	d5fb      	bpl.n	8002160 <_printf_i+0xe8>
 8002168:	881e      	ldrh	r6, [r3, #0]
 800216a:	2f6f      	cmp	r7, #111	; 0x6f
 800216c:	bf0c      	ite	eq
 800216e:	2308      	moveq	r3, #8
 8002170:	230a      	movne	r3, #10
 8002172:	4852      	ldr	r0, [pc, #328]	; (80022bc <_printf_i+0x244>)
 8002174:	2100      	movs	r1, #0
 8002176:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800217a:	6865      	ldr	r5, [r4, #4]
 800217c:	2d00      	cmp	r5, #0
 800217e:	bfa8      	it	ge
 8002180:	6821      	ldrge	r1, [r4, #0]
 8002182:	60a5      	str	r5, [r4, #8]
 8002184:	bfa4      	itt	ge
 8002186:	f021 0104 	bicge.w	r1, r1, #4
 800218a:	6021      	strge	r1, [r4, #0]
 800218c:	b90e      	cbnz	r6, 8002192 <_printf_i+0x11a>
 800218e:	2d00      	cmp	r5, #0
 8002190:	d04d      	beq.n	800222e <_printf_i+0x1b6>
 8002192:	4615      	mov	r5, r2
 8002194:	fbb6 f1f3 	udiv	r1, r6, r3
 8002198:	fb03 6711 	mls	r7, r3, r1, r6
 800219c:	5dc7      	ldrb	r7, [r0, r7]
 800219e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80021a2:	4637      	mov	r7, r6
 80021a4:	42bb      	cmp	r3, r7
 80021a6:	460e      	mov	r6, r1
 80021a8:	d9f4      	bls.n	8002194 <_printf_i+0x11c>
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d10b      	bne.n	80021c6 <_printf_i+0x14e>
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	07de      	lsls	r6, r3, #31
 80021b2:	d508      	bpl.n	80021c6 <_printf_i+0x14e>
 80021b4:	6923      	ldr	r3, [r4, #16]
 80021b6:	6861      	ldr	r1, [r4, #4]
 80021b8:	4299      	cmp	r1, r3
 80021ba:	bfde      	ittt	le
 80021bc:	2330      	movle	r3, #48	; 0x30
 80021be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80021c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80021c6:	1b52      	subs	r2, r2, r5
 80021c8:	6122      	str	r2, [r4, #16]
 80021ca:	464b      	mov	r3, r9
 80021cc:	4621      	mov	r1, r4
 80021ce:	4640      	mov	r0, r8
 80021d0:	f8cd a000 	str.w	sl, [sp]
 80021d4:	aa03      	add	r2, sp, #12
 80021d6:	f7ff fedf 	bl	8001f98 <_printf_common>
 80021da:	3001      	adds	r0, #1
 80021dc:	d14c      	bne.n	8002278 <_printf_i+0x200>
 80021de:	f04f 30ff 	mov.w	r0, #4294967295
 80021e2:	b004      	add	sp, #16
 80021e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021e8:	4834      	ldr	r0, [pc, #208]	; (80022bc <_printf_i+0x244>)
 80021ea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80021ee:	6829      	ldr	r1, [r5, #0]
 80021f0:	6823      	ldr	r3, [r4, #0]
 80021f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80021f6:	6029      	str	r1, [r5, #0]
 80021f8:	061d      	lsls	r5, r3, #24
 80021fa:	d514      	bpl.n	8002226 <_printf_i+0x1ae>
 80021fc:	07df      	lsls	r7, r3, #31
 80021fe:	bf44      	itt	mi
 8002200:	f043 0320 	orrmi.w	r3, r3, #32
 8002204:	6023      	strmi	r3, [r4, #0]
 8002206:	b91e      	cbnz	r6, 8002210 <_printf_i+0x198>
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	f023 0320 	bic.w	r3, r3, #32
 800220e:	6023      	str	r3, [r4, #0]
 8002210:	2310      	movs	r3, #16
 8002212:	e7af      	b.n	8002174 <_printf_i+0xfc>
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	f043 0320 	orr.w	r3, r3, #32
 800221a:	6023      	str	r3, [r4, #0]
 800221c:	2378      	movs	r3, #120	; 0x78
 800221e:	4828      	ldr	r0, [pc, #160]	; (80022c0 <_printf_i+0x248>)
 8002220:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002224:	e7e3      	b.n	80021ee <_printf_i+0x176>
 8002226:	0659      	lsls	r1, r3, #25
 8002228:	bf48      	it	mi
 800222a:	b2b6      	uxthmi	r6, r6
 800222c:	e7e6      	b.n	80021fc <_printf_i+0x184>
 800222e:	4615      	mov	r5, r2
 8002230:	e7bb      	b.n	80021aa <_printf_i+0x132>
 8002232:	682b      	ldr	r3, [r5, #0]
 8002234:	6826      	ldr	r6, [r4, #0]
 8002236:	1d18      	adds	r0, r3, #4
 8002238:	6961      	ldr	r1, [r4, #20]
 800223a:	6028      	str	r0, [r5, #0]
 800223c:	0635      	lsls	r5, r6, #24
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	d501      	bpl.n	8002246 <_printf_i+0x1ce>
 8002242:	6019      	str	r1, [r3, #0]
 8002244:	e002      	b.n	800224c <_printf_i+0x1d4>
 8002246:	0670      	lsls	r0, r6, #25
 8002248:	d5fb      	bpl.n	8002242 <_printf_i+0x1ca>
 800224a:	8019      	strh	r1, [r3, #0]
 800224c:	2300      	movs	r3, #0
 800224e:	4615      	mov	r5, r2
 8002250:	6123      	str	r3, [r4, #16]
 8002252:	e7ba      	b.n	80021ca <_printf_i+0x152>
 8002254:	682b      	ldr	r3, [r5, #0]
 8002256:	2100      	movs	r1, #0
 8002258:	1d1a      	adds	r2, r3, #4
 800225a:	602a      	str	r2, [r5, #0]
 800225c:	681d      	ldr	r5, [r3, #0]
 800225e:	6862      	ldr	r2, [r4, #4]
 8002260:	4628      	mov	r0, r5
 8002262:	f000 f82f 	bl	80022c4 <memchr>
 8002266:	b108      	cbz	r0, 800226c <_printf_i+0x1f4>
 8002268:	1b40      	subs	r0, r0, r5
 800226a:	6060      	str	r0, [r4, #4]
 800226c:	6863      	ldr	r3, [r4, #4]
 800226e:	6123      	str	r3, [r4, #16]
 8002270:	2300      	movs	r3, #0
 8002272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002276:	e7a8      	b.n	80021ca <_printf_i+0x152>
 8002278:	462a      	mov	r2, r5
 800227a:	4649      	mov	r1, r9
 800227c:	4640      	mov	r0, r8
 800227e:	6923      	ldr	r3, [r4, #16]
 8002280:	47d0      	blx	sl
 8002282:	3001      	adds	r0, #1
 8002284:	d0ab      	beq.n	80021de <_printf_i+0x166>
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	079b      	lsls	r3, r3, #30
 800228a:	d413      	bmi.n	80022b4 <_printf_i+0x23c>
 800228c:	68e0      	ldr	r0, [r4, #12]
 800228e:	9b03      	ldr	r3, [sp, #12]
 8002290:	4298      	cmp	r0, r3
 8002292:	bfb8      	it	lt
 8002294:	4618      	movlt	r0, r3
 8002296:	e7a4      	b.n	80021e2 <_printf_i+0x16a>
 8002298:	2301      	movs	r3, #1
 800229a:	4632      	mov	r2, r6
 800229c:	4649      	mov	r1, r9
 800229e:	4640      	mov	r0, r8
 80022a0:	47d0      	blx	sl
 80022a2:	3001      	adds	r0, #1
 80022a4:	d09b      	beq.n	80021de <_printf_i+0x166>
 80022a6:	3501      	adds	r5, #1
 80022a8:	68e3      	ldr	r3, [r4, #12]
 80022aa:	9903      	ldr	r1, [sp, #12]
 80022ac:	1a5b      	subs	r3, r3, r1
 80022ae:	42ab      	cmp	r3, r5
 80022b0:	dcf2      	bgt.n	8002298 <_printf_i+0x220>
 80022b2:	e7eb      	b.n	800228c <_printf_i+0x214>
 80022b4:	2500      	movs	r5, #0
 80022b6:	f104 0619 	add.w	r6, r4, #25
 80022ba:	e7f5      	b.n	80022a8 <_printf_i+0x230>
 80022bc:	0800262b 	.word	0x0800262b
 80022c0:	0800263c 	.word	0x0800263c

080022c4 <memchr>:
 80022c4:	4603      	mov	r3, r0
 80022c6:	b510      	push	{r4, lr}
 80022c8:	b2c9      	uxtb	r1, r1
 80022ca:	4402      	add	r2, r0
 80022cc:	4293      	cmp	r3, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	d101      	bne.n	80022d6 <memchr+0x12>
 80022d2:	2000      	movs	r0, #0
 80022d4:	e003      	b.n	80022de <memchr+0x1a>
 80022d6:	7804      	ldrb	r4, [r0, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	428c      	cmp	r4, r1
 80022dc:	d1f6      	bne.n	80022cc <memchr+0x8>
 80022de:	bd10      	pop	{r4, pc}

080022e0 <memcpy>:
 80022e0:	440a      	add	r2, r1
 80022e2:	4291      	cmp	r1, r2
 80022e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80022e8:	d100      	bne.n	80022ec <memcpy+0xc>
 80022ea:	4770      	bx	lr
 80022ec:	b510      	push	{r4, lr}
 80022ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80022f2:	4291      	cmp	r1, r2
 80022f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80022f8:	d1f9      	bne.n	80022ee <memcpy+0xe>
 80022fa:	bd10      	pop	{r4, pc}

080022fc <memmove>:
 80022fc:	4288      	cmp	r0, r1
 80022fe:	b510      	push	{r4, lr}
 8002300:	eb01 0402 	add.w	r4, r1, r2
 8002304:	d902      	bls.n	800230c <memmove+0x10>
 8002306:	4284      	cmp	r4, r0
 8002308:	4623      	mov	r3, r4
 800230a:	d807      	bhi.n	800231c <memmove+0x20>
 800230c:	1e43      	subs	r3, r0, #1
 800230e:	42a1      	cmp	r1, r4
 8002310:	d008      	beq.n	8002324 <memmove+0x28>
 8002312:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002316:	f803 2f01 	strb.w	r2, [r3, #1]!
 800231a:	e7f8      	b.n	800230e <memmove+0x12>
 800231c:	4601      	mov	r1, r0
 800231e:	4402      	add	r2, r0
 8002320:	428a      	cmp	r2, r1
 8002322:	d100      	bne.n	8002326 <memmove+0x2a>
 8002324:	bd10      	pop	{r4, pc}
 8002326:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800232a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800232e:	e7f7      	b.n	8002320 <memmove+0x24>

08002330 <_free_r>:
 8002330:	b538      	push	{r3, r4, r5, lr}
 8002332:	4605      	mov	r5, r0
 8002334:	2900      	cmp	r1, #0
 8002336:	d040      	beq.n	80023ba <_free_r+0x8a>
 8002338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800233c:	1f0c      	subs	r4, r1, #4
 800233e:	2b00      	cmp	r3, #0
 8002340:	bfb8      	it	lt
 8002342:	18e4      	addlt	r4, r4, r3
 8002344:	f000 f910 	bl	8002568 <__malloc_lock>
 8002348:	4a1c      	ldr	r2, [pc, #112]	; (80023bc <_free_r+0x8c>)
 800234a:	6813      	ldr	r3, [r2, #0]
 800234c:	b933      	cbnz	r3, 800235c <_free_r+0x2c>
 800234e:	6063      	str	r3, [r4, #4]
 8002350:	6014      	str	r4, [r2, #0]
 8002352:	4628      	mov	r0, r5
 8002354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002358:	f000 b90c 	b.w	8002574 <__malloc_unlock>
 800235c:	42a3      	cmp	r3, r4
 800235e:	d908      	bls.n	8002372 <_free_r+0x42>
 8002360:	6820      	ldr	r0, [r4, #0]
 8002362:	1821      	adds	r1, r4, r0
 8002364:	428b      	cmp	r3, r1
 8002366:	bf01      	itttt	eq
 8002368:	6819      	ldreq	r1, [r3, #0]
 800236a:	685b      	ldreq	r3, [r3, #4]
 800236c:	1809      	addeq	r1, r1, r0
 800236e:	6021      	streq	r1, [r4, #0]
 8002370:	e7ed      	b.n	800234e <_free_r+0x1e>
 8002372:	461a      	mov	r2, r3
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	b10b      	cbz	r3, 800237c <_free_r+0x4c>
 8002378:	42a3      	cmp	r3, r4
 800237a:	d9fa      	bls.n	8002372 <_free_r+0x42>
 800237c:	6811      	ldr	r1, [r2, #0]
 800237e:	1850      	adds	r0, r2, r1
 8002380:	42a0      	cmp	r0, r4
 8002382:	d10b      	bne.n	800239c <_free_r+0x6c>
 8002384:	6820      	ldr	r0, [r4, #0]
 8002386:	4401      	add	r1, r0
 8002388:	1850      	adds	r0, r2, r1
 800238a:	4283      	cmp	r3, r0
 800238c:	6011      	str	r1, [r2, #0]
 800238e:	d1e0      	bne.n	8002352 <_free_r+0x22>
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4401      	add	r1, r0
 8002396:	6011      	str	r1, [r2, #0]
 8002398:	6053      	str	r3, [r2, #4]
 800239a:	e7da      	b.n	8002352 <_free_r+0x22>
 800239c:	d902      	bls.n	80023a4 <_free_r+0x74>
 800239e:	230c      	movs	r3, #12
 80023a0:	602b      	str	r3, [r5, #0]
 80023a2:	e7d6      	b.n	8002352 <_free_r+0x22>
 80023a4:	6820      	ldr	r0, [r4, #0]
 80023a6:	1821      	adds	r1, r4, r0
 80023a8:	428b      	cmp	r3, r1
 80023aa:	bf01      	itttt	eq
 80023ac:	6819      	ldreq	r1, [r3, #0]
 80023ae:	685b      	ldreq	r3, [r3, #4]
 80023b0:	1809      	addeq	r1, r1, r0
 80023b2:	6021      	streq	r1, [r4, #0]
 80023b4:	6063      	str	r3, [r4, #4]
 80023b6:	6054      	str	r4, [r2, #4]
 80023b8:	e7cb      	b.n	8002352 <_free_r+0x22>
 80023ba:	bd38      	pop	{r3, r4, r5, pc}
 80023bc:	20000094 	.word	0x20000094

080023c0 <sbrk_aligned>:
 80023c0:	b570      	push	{r4, r5, r6, lr}
 80023c2:	4e0e      	ldr	r6, [pc, #56]	; (80023fc <sbrk_aligned+0x3c>)
 80023c4:	460c      	mov	r4, r1
 80023c6:	6831      	ldr	r1, [r6, #0]
 80023c8:	4605      	mov	r5, r0
 80023ca:	b911      	cbnz	r1, 80023d2 <sbrk_aligned+0x12>
 80023cc:	f000 f8bc 	bl	8002548 <_sbrk_r>
 80023d0:	6030      	str	r0, [r6, #0]
 80023d2:	4621      	mov	r1, r4
 80023d4:	4628      	mov	r0, r5
 80023d6:	f000 f8b7 	bl	8002548 <_sbrk_r>
 80023da:	1c43      	adds	r3, r0, #1
 80023dc:	d00a      	beq.n	80023f4 <sbrk_aligned+0x34>
 80023de:	1cc4      	adds	r4, r0, #3
 80023e0:	f024 0403 	bic.w	r4, r4, #3
 80023e4:	42a0      	cmp	r0, r4
 80023e6:	d007      	beq.n	80023f8 <sbrk_aligned+0x38>
 80023e8:	1a21      	subs	r1, r4, r0
 80023ea:	4628      	mov	r0, r5
 80023ec:	f000 f8ac 	bl	8002548 <_sbrk_r>
 80023f0:	3001      	adds	r0, #1
 80023f2:	d101      	bne.n	80023f8 <sbrk_aligned+0x38>
 80023f4:	f04f 34ff 	mov.w	r4, #4294967295
 80023f8:	4620      	mov	r0, r4
 80023fa:	bd70      	pop	{r4, r5, r6, pc}
 80023fc:	20000098 	.word	0x20000098

08002400 <_malloc_r>:
 8002400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002404:	1ccd      	adds	r5, r1, #3
 8002406:	f025 0503 	bic.w	r5, r5, #3
 800240a:	3508      	adds	r5, #8
 800240c:	2d0c      	cmp	r5, #12
 800240e:	bf38      	it	cc
 8002410:	250c      	movcc	r5, #12
 8002412:	2d00      	cmp	r5, #0
 8002414:	4607      	mov	r7, r0
 8002416:	db01      	blt.n	800241c <_malloc_r+0x1c>
 8002418:	42a9      	cmp	r1, r5
 800241a:	d905      	bls.n	8002428 <_malloc_r+0x28>
 800241c:	230c      	movs	r3, #12
 800241e:	2600      	movs	r6, #0
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	4630      	mov	r0, r6
 8002424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002428:	4e2e      	ldr	r6, [pc, #184]	; (80024e4 <_malloc_r+0xe4>)
 800242a:	f000 f89d 	bl	8002568 <__malloc_lock>
 800242e:	6833      	ldr	r3, [r6, #0]
 8002430:	461c      	mov	r4, r3
 8002432:	bb34      	cbnz	r4, 8002482 <_malloc_r+0x82>
 8002434:	4629      	mov	r1, r5
 8002436:	4638      	mov	r0, r7
 8002438:	f7ff ffc2 	bl	80023c0 <sbrk_aligned>
 800243c:	1c43      	adds	r3, r0, #1
 800243e:	4604      	mov	r4, r0
 8002440:	d14d      	bne.n	80024de <_malloc_r+0xde>
 8002442:	6834      	ldr	r4, [r6, #0]
 8002444:	4626      	mov	r6, r4
 8002446:	2e00      	cmp	r6, #0
 8002448:	d140      	bne.n	80024cc <_malloc_r+0xcc>
 800244a:	6823      	ldr	r3, [r4, #0]
 800244c:	4631      	mov	r1, r6
 800244e:	4638      	mov	r0, r7
 8002450:	eb04 0803 	add.w	r8, r4, r3
 8002454:	f000 f878 	bl	8002548 <_sbrk_r>
 8002458:	4580      	cmp	r8, r0
 800245a:	d13a      	bne.n	80024d2 <_malloc_r+0xd2>
 800245c:	6821      	ldr	r1, [r4, #0]
 800245e:	3503      	adds	r5, #3
 8002460:	1a6d      	subs	r5, r5, r1
 8002462:	f025 0503 	bic.w	r5, r5, #3
 8002466:	3508      	adds	r5, #8
 8002468:	2d0c      	cmp	r5, #12
 800246a:	bf38      	it	cc
 800246c:	250c      	movcc	r5, #12
 800246e:	4638      	mov	r0, r7
 8002470:	4629      	mov	r1, r5
 8002472:	f7ff ffa5 	bl	80023c0 <sbrk_aligned>
 8002476:	3001      	adds	r0, #1
 8002478:	d02b      	beq.n	80024d2 <_malloc_r+0xd2>
 800247a:	6823      	ldr	r3, [r4, #0]
 800247c:	442b      	add	r3, r5
 800247e:	6023      	str	r3, [r4, #0]
 8002480:	e00e      	b.n	80024a0 <_malloc_r+0xa0>
 8002482:	6822      	ldr	r2, [r4, #0]
 8002484:	1b52      	subs	r2, r2, r5
 8002486:	d41e      	bmi.n	80024c6 <_malloc_r+0xc6>
 8002488:	2a0b      	cmp	r2, #11
 800248a:	d916      	bls.n	80024ba <_malloc_r+0xba>
 800248c:	1961      	adds	r1, r4, r5
 800248e:	42a3      	cmp	r3, r4
 8002490:	6025      	str	r5, [r4, #0]
 8002492:	bf18      	it	ne
 8002494:	6059      	strne	r1, [r3, #4]
 8002496:	6863      	ldr	r3, [r4, #4]
 8002498:	bf08      	it	eq
 800249a:	6031      	streq	r1, [r6, #0]
 800249c:	5162      	str	r2, [r4, r5]
 800249e:	604b      	str	r3, [r1, #4]
 80024a0:	4638      	mov	r0, r7
 80024a2:	f104 060b 	add.w	r6, r4, #11
 80024a6:	f000 f865 	bl	8002574 <__malloc_unlock>
 80024aa:	f026 0607 	bic.w	r6, r6, #7
 80024ae:	1d23      	adds	r3, r4, #4
 80024b0:	1af2      	subs	r2, r6, r3
 80024b2:	d0b6      	beq.n	8002422 <_malloc_r+0x22>
 80024b4:	1b9b      	subs	r3, r3, r6
 80024b6:	50a3      	str	r3, [r4, r2]
 80024b8:	e7b3      	b.n	8002422 <_malloc_r+0x22>
 80024ba:	6862      	ldr	r2, [r4, #4]
 80024bc:	42a3      	cmp	r3, r4
 80024be:	bf0c      	ite	eq
 80024c0:	6032      	streq	r2, [r6, #0]
 80024c2:	605a      	strne	r2, [r3, #4]
 80024c4:	e7ec      	b.n	80024a0 <_malloc_r+0xa0>
 80024c6:	4623      	mov	r3, r4
 80024c8:	6864      	ldr	r4, [r4, #4]
 80024ca:	e7b2      	b.n	8002432 <_malloc_r+0x32>
 80024cc:	4634      	mov	r4, r6
 80024ce:	6876      	ldr	r6, [r6, #4]
 80024d0:	e7b9      	b.n	8002446 <_malloc_r+0x46>
 80024d2:	230c      	movs	r3, #12
 80024d4:	4638      	mov	r0, r7
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	f000 f84c 	bl	8002574 <__malloc_unlock>
 80024dc:	e7a1      	b.n	8002422 <_malloc_r+0x22>
 80024de:	6025      	str	r5, [r4, #0]
 80024e0:	e7de      	b.n	80024a0 <_malloc_r+0xa0>
 80024e2:	bf00      	nop
 80024e4:	20000094 	.word	0x20000094

080024e8 <_realloc_r>:
 80024e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024ec:	4680      	mov	r8, r0
 80024ee:	4614      	mov	r4, r2
 80024f0:	460e      	mov	r6, r1
 80024f2:	b921      	cbnz	r1, 80024fe <_realloc_r+0x16>
 80024f4:	4611      	mov	r1, r2
 80024f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024fa:	f7ff bf81 	b.w	8002400 <_malloc_r>
 80024fe:	b92a      	cbnz	r2, 800250c <_realloc_r+0x24>
 8002500:	f7ff ff16 	bl	8002330 <_free_r>
 8002504:	4625      	mov	r5, r4
 8002506:	4628      	mov	r0, r5
 8002508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800250c:	f000 f838 	bl	8002580 <_malloc_usable_size_r>
 8002510:	4284      	cmp	r4, r0
 8002512:	4607      	mov	r7, r0
 8002514:	d802      	bhi.n	800251c <_realloc_r+0x34>
 8002516:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800251a:	d812      	bhi.n	8002542 <_realloc_r+0x5a>
 800251c:	4621      	mov	r1, r4
 800251e:	4640      	mov	r0, r8
 8002520:	f7ff ff6e 	bl	8002400 <_malloc_r>
 8002524:	4605      	mov	r5, r0
 8002526:	2800      	cmp	r0, #0
 8002528:	d0ed      	beq.n	8002506 <_realloc_r+0x1e>
 800252a:	42bc      	cmp	r4, r7
 800252c:	4622      	mov	r2, r4
 800252e:	4631      	mov	r1, r6
 8002530:	bf28      	it	cs
 8002532:	463a      	movcs	r2, r7
 8002534:	f7ff fed4 	bl	80022e0 <memcpy>
 8002538:	4631      	mov	r1, r6
 800253a:	4640      	mov	r0, r8
 800253c:	f7ff fef8 	bl	8002330 <_free_r>
 8002540:	e7e1      	b.n	8002506 <_realloc_r+0x1e>
 8002542:	4635      	mov	r5, r6
 8002544:	e7df      	b.n	8002506 <_realloc_r+0x1e>
	...

08002548 <_sbrk_r>:
 8002548:	b538      	push	{r3, r4, r5, lr}
 800254a:	2300      	movs	r3, #0
 800254c:	4d05      	ldr	r5, [pc, #20]	; (8002564 <_sbrk_r+0x1c>)
 800254e:	4604      	mov	r4, r0
 8002550:	4608      	mov	r0, r1
 8002552:	602b      	str	r3, [r5, #0]
 8002554:	f7fe f8da 	bl	800070c <_sbrk>
 8002558:	1c43      	adds	r3, r0, #1
 800255a:	d102      	bne.n	8002562 <_sbrk_r+0x1a>
 800255c:	682b      	ldr	r3, [r5, #0]
 800255e:	b103      	cbz	r3, 8002562 <_sbrk_r+0x1a>
 8002560:	6023      	str	r3, [r4, #0]
 8002562:	bd38      	pop	{r3, r4, r5, pc}
 8002564:	2000009c 	.word	0x2000009c

08002568 <__malloc_lock>:
 8002568:	4801      	ldr	r0, [pc, #4]	; (8002570 <__malloc_lock+0x8>)
 800256a:	f000 b811 	b.w	8002590 <__retarget_lock_acquire_recursive>
 800256e:	bf00      	nop
 8002570:	200000a0 	.word	0x200000a0

08002574 <__malloc_unlock>:
 8002574:	4801      	ldr	r0, [pc, #4]	; (800257c <__malloc_unlock+0x8>)
 8002576:	f000 b80c 	b.w	8002592 <__retarget_lock_release_recursive>
 800257a:	bf00      	nop
 800257c:	200000a0 	.word	0x200000a0

08002580 <_malloc_usable_size_r>:
 8002580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002584:	1f18      	subs	r0, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	bfbc      	itt	lt
 800258a:	580b      	ldrlt	r3, [r1, r0]
 800258c:	18c0      	addlt	r0, r0, r3
 800258e:	4770      	bx	lr

08002590 <__retarget_lock_acquire_recursive>:
 8002590:	4770      	bx	lr

08002592 <__retarget_lock_release_recursive>:
 8002592:	4770      	bx	lr

08002594 <_init>:
 8002594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002596:	bf00      	nop
 8002598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259a:	bc08      	pop	{r3}
 800259c:	469e      	mov	lr, r3
 800259e:	4770      	bx	lr

080025a0 <_fini>:
 80025a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a2:	bf00      	nop
 80025a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025a6:	bc08      	pop	{r3}
 80025a8:	469e      	mov	lr, r3
 80025aa:	4770      	bx	lr
